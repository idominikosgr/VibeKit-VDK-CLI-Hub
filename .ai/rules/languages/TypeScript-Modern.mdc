---
description: Modern TypeScript best practices focusing on functional programming, type safety, and maintainable code patterns.
globs: ["**/*.{ts", "tsx}", "**/tsconfig.json"]
alwaysApply: false
version: "2.0.0"
lastUpdated: "2025-05-14"
compatibleWith: ["React19","NextJS15","NodeExpress"]
---

# Modern TypeScript Best Practices

## Programming Paradigm

- Favor functional and declarative programming patterns over imperative and OOP approaches
- Use pure functions where possible to minimize side effects
- Avoid classes when functional approaches suffice
- Prefer composition over inheritance
- Use immutable data patterns and avoid direct mutations
- Implement modular code with clear separation of concerns

## Type System Usage

- Use TypeScript for all code; don't fall back to untyped JavaScript
- Prefer interfaces over types for object definitions (better for extension and merging)
- Avoid enums; use const objects or `as const` assertions instead:
  ```typescript
  // Instead of enum:
  // enum Status { PENDING, ACTIVE, COMPLETE }
  
  // Use const object:
  const Status = {
    PENDING: 'PENDING',
    ACTIVE: 'ACTIVE',
    COMPLETE: 'COMPLETE'
  } as const;
  
  type Status = typeof Status[keyof typeof Status];
  ```

- Use type inference where it improves readability, but be explicit where it enhances clarity
- Leverage TypeScript's utility types (Partial, Required, Pick, Omit, etc.)
- Use Generics for reusable type-safe components and functions
- Implement proper discriminated unions for type narrowing
- Define explicit return types for public functions and methods

## Type Safety and Validation

- Use Zod for runtime validation and type inference
- Implement proper error handling with typed errors
- Use type guards for runtime type checking
- Avoid type assertions (`as`) when possible; use type guards instead
- Implement proper null and undefined handling with optional chaining and nullish coalescing
- Use strict TypeScript configuration in tsconfig.json

## Code Style and Structure

- Write concise, technical code with accurate examples
- Use descriptive variable names with auxiliary verbs (e.g., `isLoading`, `hasError`)
- Structure files logically: exported components/functions, helpers, types, constants
- Use arrow functions for components and handlers
- Use the "function" keyword for pure utility functions
- Avoid unnecessary curly braces in conditionals; use concise syntax for simple statements

```typescript
// Prefer this:
if (condition) return value;

// Over this for simple statements:
if (condition) {
  return value;
}
```

- Use early returns and guard clauses to reduce nesting
- Use destructuring for props and function parameters
- Group related functionality in custom hooks

## Function and Component Patterns

- Use functional components with TypeScript interfaces
  ```typescript
  interface ButtonProps {
    variant?: 'primary' | 'secondary';
    size?: 'small' | 'medium' | 'large';
    children: React.ReactNode;
    onClick?: () => void;
  }
  
  const Button = ({ 
    variant = 'primary', 
    size = 'medium', 
    children, 
    onClick 
  }: ButtonProps) => {
    return (
      <button 
        className={`btn btn-${variant} btn-${size}`} 
        onClick={onClick}
      >
        {children}
      </button>
    );
  };
  ```

- Use arrow functions for components and event handlers
- Implement proper prop typing with default values
- Use React.FC type sparingly; prefer explicit props interfaces
- Use component composition for complex UI structures

## Error Handling and Validation

- Prioritize error handling: handle errors and edge cases early
- Use early returns and guard clauses
- Implement proper error logging and user-friendly messages
- Use Zod for data validation and parsing
  ```typescript
  import { z } from 'zod';
  
  const UserSchema = z.object({
    id: z.string().uuid(),
    name: z.string().min(2).max(100),
    email: z.string().email(),
    age: z.number().int().positive().optional(),
  });
  
  type User = z.infer<typeof UserSchema>;
  
  function processUserData(data: unknown): User {
    return UserSchema.parse(data);
  }
  ```

- Use try/catch blocks for specific error handling
- Implement typed errors for better error handling

## Asynchronous Code

- Use async/await over Promise chains
- Implement proper error handling in async functions
- Use Promise.all for parallel async operations
- Type async function returns properly
- Use AbortController for cancellable requests
- Implement loading, error, and success states for async operations

## Naming Conventions

- Use PascalCase for React components, interfaces, and type aliases
- Use camelCase for variables, functions, and methods
- Use UPPER_SNAKE_CASE for constants and enum-like values
- Use descriptive names that clearly indicate purpose
- Prefix boolean variables with is/has/should (e.g., isLoading, hasError)
- Use consistent naming patterns throughout the codebase

## Module and Import Management

- Use ES modules with named exports
- Group and organize imports logically
- Avoid excessive imports in a single file
- Use barrel exports (index.ts) for related components
- Implement a clean import structure:
  ```typescript
  // Third-party imports
  import React, { useState, useEffect } from 'react';
  import { z } from 'zod';
  
  // Internal imports
  import { Button } from '@/components/ui';
  import { useAuth } from '@/hooks';
  
  // Types and utilities
  import type { User } from '@/types';
  import { formatDate } from '@/utils';
  ```

## Performance Considerations

- Focus on readability over extreme performance optimizations
- Use memoization (useMemo, useCallback) appropriately
- Avoid unnecessary rerenders with proper component structure
- Implement proper dependency arrays in hooks
- Use performance measurement tools when needed
- Consider bundle size when adding dependencies

## Testing

- Write unit tests for critical business logic
- Use TypeScript in test files
- Implement proper type mocking
- Test edge cases and error handling
- Use proper testing utilities for React components
- Aim for good test coverage without obsessing over metrics

## Documentation

- Use JSDoc comments for public APIs and complex functions
- Document complex types and interfaces
- Use self-documenting code where possible
- Comment complex logic or non-obvious solutions
- Use explanatory variable names over comments when possible

## TypeScript Configuration Best Practices

- Use strict mode in tsconfig.json
- Configure proper module resolution
- Set appropriate target ES version
- Use path aliasing for improved imports
- Configure appropriate lib settings
- Example tsconfig.json:

```json
{
  "compilerOptions": {
    "target": "ES2020",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx"],
  "exclude": ["node_modules"]
}
```