---
description: "Guidelines for AI assistants to safely and effectively execute terminal commands in development environments."
globs: []
alwaysApply: false
version: "2.0.0"
lastUpdated: "2025-05-14"
compatibleWith:
  - "Memory-MCP"
  - "Sequential-Thinking-Advanced"
---


# Command Execution for AI Assistants

## Overview

Command execution is a powerful capability that allows AI assistants to interact with development environments, build systems, and external tools. This guide provides standardized patterns for safe, effective command execution that respects security boundaries while delivering maximum utility to developers.

## Core Command Execution Principles

- **Safety First**: Prioritize non-destructive operations and get explicit confirmation for potentially harmful commands
- **Clear Intent**: Express command purpose and expected outcome before execution
- **Proper Environment**: Always specify the correct working directory instead of changing directories
- **Error Resilience**: Handle command failures gracefully with useful diagnostics
- **Output Management**: Process command output appropriately for the context
- **Idempotence**: Prefer commands that can be safely executed multiple times
- **Permission Awareness**: Respect system permissions and never attempt to circumvent them

## Command Safety Categories

### Safe Commands (Generally Auto-runnable)

- **Read-only operations**: Commands that only read state without modification
  - File listings (`ls`, `dir`, `find`)  
  - Status checks (`git status`, `npm list`)
  - Information retrieval (`echo`, `printenv`, `systeminfo`)
  - Version checks (`node -v`, `python --version`)

### Potentially Impactful Commands (Require Caution)

- **State-modifying operations**: Commands that change state in controlled ways
  - File creation that doesn't overwrite (`mkdir`, `touch`)
  - Installing dev dependencies (`npm install --save-dev`)
  - Running tests (`npm test`, `pytest`)
  - Building projects (`npm run build`, `make`)

### Destructive Commands (Always Require Explicit Confirmation)

- **High-impact operations**: Commands that could result in data loss or significant changes
  - File removal (`rm`, `rmdir`, `del`)
  - Database operations (`DROP TABLE`, `migrations`)
  - System-wide installations (`sudo`, `apt`, global installs)
  - Configuration changes (`git config --global`)
  - Git operations that modify history (`git push --force`, `git reset --hard`)

## Command Execution Patterns

### Basic Command Execution Pattern

```javascript
// Pattern for basic command execution
async function executeCommand(command, options = {}) {
  const {
    workingDirectory = process.cwd(),
    timeout = 30000,
    environment = {},
    blocking = true,
    safeToAutoRun = false
  } = options;
  
  // 1. Validate command
  if (!command || typeof command !== 'string') {
    throw new Error('Command must be a non-empty string');
  }
  
  // 2. Check for unsafe patterns
  const safetyCheck = checkCommandSafety(command);
  if (safetyCheck.potentiallyDestructive && !userConfirmed) {
    // Request user confirmation
    throw new Error(`This command requires explicit user confirmation: ${safetyCheck.reason}`);
  }
  
  // 3. Prepare execution context
  const execOptions = {
    cwd: workingDirectory,
    env: { ...process.env, ...environment },
    timeout,
    maxBuffer: 1024 * 1024 * 10, // 10 MB output buffer
  };
  
  // 4. Execute command with appropriate method based on blocking preference
  try {
    if (blocking) {
      const { stdout, stderr } = await execPromise(command, execOptions);
      return { success: true, stdout, stderr, command };
    } else {
      // Non-blocking execution
      const childProcess = spawn(command, [], {
        ...execOptions,
        shell: true,
        detached: true
      });
      
      return {
        success: true,
        processId: childProcess.pid,
        command,
        message: 'Command started in background'
      };
    }
  } catch (error) {
    return {
      success: false,
      error: error.message,
      stderr: error.stderr,
      stdout: error.stdout,
      command
    };
  }
}
```

### Command Chaining Pattern

```javascript
// Pattern for executing a sequence of dependent commands
async function executeCommandSequence(commands, options = {}) {
  const {
    stopOnError = true,
    workingDirectory = process.cwd(),
    environment = {}
  } = options;
  
  // 1. Validate commands array
  if (!Array.isArray(commands) || commands.length === 0) {
    throw new Error('Commands must be a non-empty array');
  }
  
  const results = [];
  let context = { env: { ...process.env, ...environment } };
  
  // 2. Execute commands in sequence
  for (const cmd of commands) {
    // 3. Resolve command (could be string or function returning string based on context)
    const resolvedCommand = typeof cmd === 'function' 
      ? cmd(context)
      : cmd;
    
    // 4. Execute with proper error handling
    try {
      const result = await executeCommand(resolvedCommand, {
        workingDirectory,
        environment: context.env
      });
      
      results.push(result);
      
      // 5. Update context with new information
      if (result.success) {
        context = {
          ...context,
          lastResult: result,
          stdout: result.stdout,
          stderr: result.stderr
        };
      } else if (stopOnError) {
        return { success: false, results, failedAt: results.length - 1 };
      }
    } catch (error) {
      results.push({ success: false, error: error.message, command: resolvedCommand });
      if (stopOnError) {
        return { success: false, results, failedAt: results.length - 1 };
      }
    }
  }
  
  return { success: true, results };
}
```

### Long-Running Command Pattern

```javascript
// Pattern for managing long-running commands
async function executeLongRunningCommand(command, options = {}) {
  const {
    workingDirectory = process.cwd(),
    environment = {},
    outputCallback = null,
    terminationSignal = null,
    maxRuntime = 0 // 0 means no limit
  } = options;
  
  // 1. Validate command
  if (!command || typeof command !== 'string') {
    throw new Error('Command must be a non-empty string');
  }
  
  // 2. Prepare execution context
  const execOptions = {
    cwd: workingDirectory,
    env: { ...process.env, ...environment },
    shell: true
  };
  
  return new Promise((resolve, reject) => {
    // 3. Spawn process
    const childProcess = spawn(command, [], execOptions);
    let stdout = '';
    let stderr = '';
    let terminated = false;
    
    // 4. Set up timeout if specified
    let timeoutId;
    if (maxRuntime > 0) {
      timeoutId = setTimeout(() => {
        terminated = true;
        childProcess.kill('SIGTERM');
      }, maxRuntime);
    }
    
    // 5. Handle termination signal if provided
    if (terminationSignal) {
      terminationSignal.subscribe(() => {
        terminated = true;
        childProcess.kill('SIGTERM');
        if (timeoutId) clearTimeout(timeoutId);
      });
    }
    
    // 6. Handle output streams
    childProcess.stdout.on('data', (data) => {
      const output = data.toString();
      stdout += output;
      if (outputCallback) outputCallback('stdout', output);
    });
    
    childProcess.stderr.on('data', (data) => {
      const output = data.toString();
      stderr += output;
      if (outputCallback) outputCallback('stderr', output);
    });
    
    // 7. Handle process completion
    childProcess.on('close', (code) => {
      if (timeoutId) clearTimeout(timeoutId);
      resolve({
        success: code === 0,
        code,
        stdout,
        stderr,
        terminated,
        command
      });
    });
    
    childProcess.on('error', (error) => {
      if (timeoutId) clearTimeout(timeoutId);
      reject({
        success: false,
        error: error.message,
        command
      });
    });
  });
}
```

## Common Command Patterns for Development Tasks

### Project Setup

```javascript
// Pattern for project initialization
async function initializeProject(projectType, options = {}) {
  const commands = [];
  
  // 1. Create project directory if needed
  if (options.createDirectory) {
    commands.push(`mkdir -p ${options.projectPath}`);
  }
  
  // 2. Initialize based on project type
  switch (projectType) {
    case 'node':
      commands.push(
        `npm init -y`,
        `npm install --save-dev jest eslint`
      );
      break;
    case 'python':
      commands.push(
        `python -m venv .venv`,
        `source .venv/bin/activate && pip install pytest black`
      );
      break;
    // Add other project types as needed
  }
  
  // 3. Execute setup commands
  return executeCommandSequence(commands, {
    workingDirectory: options.projectPath || process.cwd()
  });
}
```

### Build and Test

```javascript
// Pattern for build and test workflows
async function buildAndTest(options = {}) {
  const {
    buildCommand = 'npm run build',
    testCommand = 'npm test',
    workingDirectory = process.cwd(),
    skipTestsOnBuildFailure = true
  } = options;
  
  // 1. Run build
  const buildResult = await executeCommand(buildCommand, { workingDirectory });
  
  // 2. Check build success
  if (!buildResult.success && skipTestsOnBuildFailure) {
    return {
      success: false,
      buildResult,
      message: 'Build failed, tests skipped'
    };
  }
  
  // 3. Run tests
  const testResult = await executeCommand(testCommand, { workingDirectory });
  
  // 4. Return combined results
  return {
    success: buildResult.success && testResult.success,
    buildResult,
    testResult
  };
}
```

### Dev Server Execution

```javascript
// Pattern for running development servers
async function startDevServer(options = {}) {
  const {
    command = 'npm run dev',
    workingDirectory = process.cwd(),
    port = 3000,
    waitForReady = true,
    readyPattern = 'ready|started|listening on|running at'
  } = options;
  
  // 1. Build full command
  const fullCommand = command.includes('PORT=') 
    ? command 
    : `PORT=${port} ${command}`;
  
  // 2. Start server as non-blocking process
  const serverProcess = spawn(fullCommand, [], {
    cwd: workingDirectory,
    shell: true,
    detached: true
  });
  
  if (!waitForReady) {
    return {
      success: true,
      processId: serverProcess.pid,
      port,
      url: `http://localhost:${port}`,
      message: 'Server started (not waiting for ready signal)'
    };
  }
  
  // 3. Wait for ready signal if requested
  return new Promise((resolve) => {
    const readyRegex = new RegExp(readyPattern, 'i');
    let output = '';
    
    const timeoutId = setTimeout(() => {
      // If server doesn't report ready in 30 seconds, resolve anyway
      resolve({
        success: true,
        processId: serverProcess.pid,
        port,
        url: `http://localhost:${port}`,
        ready: false,
        message: 'Server started but ready signal not detected',
        output
      });
    }, 30000);
    
    function checkForReadySignal(data) {
      const text = data.toString();
      output += text;
      
      if (readyRegex.test(text)) {
        clearTimeout(timeoutId);
        resolve({
          success: true,
          processId: serverProcess.pid,
          port,
          url: `http://localhost:${port}`,
          ready: true,
          message: 'Server started and ready',
          output
        });
      }
    }
    
    serverProcess.stdout.on('data', checkForReadySignal);
    serverProcess.stderr.on('data', checkForReadySignal);
    
    serverProcess.on('error', (error) => {
      clearTimeout(timeoutId);
      resolve({
        success: false,
        error: error.message,
        output
      });
    });
  });
}
```

## Command Execution Context

### Environment Management

```javascript
// Pattern for environment management
function prepareEnvironment(baseEnv, additionalEnv = {}) {
  // 1. Start with current or provided base environment
  const environment = { ...(baseEnv || process.env) };
  
  // 2. Add/override with additional variables
  Object.assign(environment, additionalEnv);
  
  // 3. Filter out potentially sensitive information when logging
  const safeEnvironment = { ...environment };
  const sensitiveKeys = ['TOKEN', 'KEY', 'SECRET', 'PASSWORD', 'PASS', 'AUTH'];
  
  for (const key of Object.keys(safeEnvironment)) {
    if (sensitiveKeys.some(sensitive => key.toUpperCase().includes(sensitive))) {
      safeEnvironment[key] = '***REDACTED***';
    }
  }
  
  return { environment, safeEnvironment };
}
```

### Working Directory Management

```javascript
// Pattern for working directory determination
function determineWorkingDirectory(options = {}) {
  const {
    specifiedDirectory = null,
    projectRoot = null,
    defaultToProjectRoot = true,
    fallbackToUserHomeDirectory = true
  } = options;
  
  // 1. Use explicitly specified directory if provided
  if (specifiedDirectory && directoryExists(specifiedDirectory)) {
    return specifiedDirectory;
  }
  
  // 2. Use project root if available and preferred
  if (defaultToProjectRoot && projectRoot && directoryExists(projectRoot)) {
    return projectRoot;
  }
  
  // 3. Use current working directory if it exists and is accessible
  try {
    const currentDir = process.cwd();
    if (directoryExists(currentDir)) {
      return currentDir;
    }
  } catch (error) {
    // Current directory might not be accessible
  }
  
  // 4. Fall back to user home directory if allowed
  if (fallbackToUserHomeDirectory) {
    const homeDir = os.homedir();
    if (directoryExists(homeDir)) {
      return homeDir;
    }
  }
  
  // 5. If all else fails, throw an error
  throw new Error('Could not determine a valid working directory');
}
```

## Best Practices for AI Assistants

### Before Command Execution

1. **Validate Intent**: Ensure you understand what the user wants to accomplish
2. **Check Command Safety**: Assess potential risks of the command
3. **Explain Purpose**: Clearly state what the command will do
4. **Consider Alternatives**: Suggest safer alternatives when appropriate
5. **Use Absolute Paths**: Prefer absolute paths over relative paths
6. **Never Use `cd`**: Always specify working directory parameter instead

### During Command Execution

1. **Handle Long-Running Commands**: Use non-blocking execution for servers and watches
2. **Manage Output**: Process and parse command output meaningfully
3. **Detect Errors**: Look for error patterns in output even when exit code is 0
4. **Provide Progress Updates**: For multi-step commands, report on progress

### After Command Execution

1. **Verify Success**: Check exit codes and output for expected results
2. **Explain Results**: Interpret command output for the user
3. **Suggest Next Steps**: Recommend logical next actions
4. **Handle Failures**: Provide clear explanations and potential fixes for failures
5. **Clean Up**: Terminate long-running processes when they're no longer needed

## OS-Specific Considerations

### Windows-Specific Patterns

- **Use PowerShell**: Prefer PowerShell over Command Prompt for consistent behavior
- **Path Separators**: Use backslashes (`\`) for Windows paths
- **Command Differences**: Adjust commands for Windows (`dir` vs `ls`, etc.)
- **Process Management**: Use appropriate process termination methods

### Unix-like Systems (Linux/macOS) Patterns

- **Shell Selection**: Consider using `/bin/bash` explicitly for consistent behavior
- **Path Separators**: Use forward slashes (`/`) for paths
- **Environment Setup**: Source appropriate profile/rc files when needed
- **Permission Handling**: Consider file permissions and ownership

## Error Handling and Recovery

### Common Error Patterns

```javascript
// Pattern for enhanced error handling
async function executeWithErrorHandling(command, options = {}) {
  const {
    retryCount = 0,
    retryDelay = 1000,
    workingDirectory = process.cwd(),
    errorPatterns = [
      { regex: /permission denied/i, suggestion: 'Check file permissions or try with elevated privileges' },
      { regex: /command not found/i, suggestion: 'Ensure the command is installed and in your PATH' },
      { regex: /ENOENT/i, suggestion: 'File or directory not found, check paths' }
      // Add more common error patterns
    ]
  } = options;
  
  let lastError = null;
  
  // 1. Try execution with retries
  for (let attempt = 0; attempt <= retryCount; attempt++) {
    try {
      const result = await executeCommand(command, { workingDirectory });
      
      // 2. Check for success based on exit code
      if (result.success) {
        return result;
      }
      
      // 3. Check for known error patterns in output
      const errorDiagnosis = diagnoseCLIError(result, errorPatterns);
      lastError = { ...result, diagnosis: errorDiagnosis };
      
      // 4. Wait before retry if this isn't the last attempt
      if (attempt < retryCount) {
        await new Promise(resolve => setTimeout(resolve, retryDelay));
      }
    } catch (error) {
      lastError = error;
      
      if (attempt < retryCount) {
        await new Promise(resolve => setTimeout(resolve, retryDelay));
      }
    }
  }
  
  // 5. Return detailed error information after all retries fail
  return {
    success: false,
    error: lastError,
    command,
    suggestions: lastError.diagnosis?.suggestions || ['Command failed after multiple attempts']
  };
}

// Helper function to diagnose common CLI errors
function diagnoseCLIError(result, errorPatterns) {
  const output = `${result.stderr || ''} ${result.stdout || ''}`;
  
  for (const pattern of errorPatterns) {
    if (pattern.regex.test(output)) {
      return {
        type: pattern.type || 'unknown',
        suggestions: [pattern.suggestion]
      };
    }
  }
  
  return { type: 'unknown', suggestions: ['Check command syntax and environment'] };
}
```

### Recovery Strategies

- **Suggest Fixes**: Provide specific commands to fix common errors
- **Alternative Commands**: Offer alternative approaches when primary method fails
- **Progressive Fallback**: Try increasingly simple alternatives until success
- **Manual Steps**: When automation fails, provide clear manual instructions
- **Diagnostic Commands**: Run diagnostic commands to get more information about failures