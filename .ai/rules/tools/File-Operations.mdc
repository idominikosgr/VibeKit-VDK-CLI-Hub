---
description: "Guidelines for AI assistants to effectively perform file operations within codebases."
globs: []
alwaysApply: false
version: "2.0.0"
lastUpdated: "2025-05-14"
compatibleWith:
  - "Memory-MCP"
  - "Sequential-Thinking-Advanced"
---


# File Operations for AI Assistants

## Overview

Effective file operations are fundamental to AI-assisted development. This guide provides standardized patterns for AI assistants to create, read, modify, and manage files within a codebase in a safe, predictable manner that aligns with developer expectations.

## Core File Operation Principles

- **Non-destructive by Default**: Never delete or overwrite content without explicit confirmation.
- **Path Awareness**: Use absolute paths for clarity and to avoid ambiguity.
- **Atomic Operations**: Complete file operations fully or not at all to prevent partial states.
- **Validation First**: Check preconditions before performing operations.
- **Error Handling**: Anticipate and handle potential failure points.
- **Backup Consideration**: Consider backing up critical files before significant modifications.
- **Permission Awareness**: Respect file system permissions and restrictions.

## File Reading Operations

### Reading Entire Files

```javascript
// Pattern for reading entire files
async function readEntireFile(absolutePath) {
  // 1. Validate path
  if (!isValidPath(absolutePath)) {
    throw new Error(`Invalid path: ${absolutePath}`);
  }
  
  // 2. Check existence
  if (!fileExists(absolutePath)) {
    throw new Error(`File does not exist: ${absolutePath}`);
  }
  
  // 3. Read with proper error handling
  try {
    const content = await fs.readFile(absolutePath, 'utf-8');
    return content;
  } catch (error) {
    throw new Error(`Failed to read file: ${error.message}`);
  }
}
```

### Reading File Sections

```javascript
// Pattern for reading specific line ranges
async function readFileLines(absolutePath, startLine, endLine) {
  // 1. Validate path and line numbers
  if (!isValidPath(absolutePath) || startLine < 0 || endLine < startLine) {
    throw new Error(`Invalid parameters for file reading`);
  }
  
  // 2. Check existence
  if (!fileExists(absolutePath)) {
    throw new Error(`File does not exist: ${absolutePath}`);
  }
  
  // 3. Read with proper error handling
  try {
    const content = await fs.readFile(absolutePath, 'utf-8');
    const lines = content.split('\n');
    return lines.slice(startLine, endLine + 1).join('\n');
  } catch (error) {
    throw new Error(`Failed to read file lines: ${error.message}`);
  }
}
```

## File Writing Operations

### Creating New Files

```javascript
// Pattern for creating new files
async function createNewFile(absolutePath, content) {
  // 1. Validate path
  if (!isValidPath(absolutePath)) {
    throw new Error(`Invalid path: ${absolutePath}`);
  }
  
  // 2. Check if file already exists to prevent overwrites
  if (fileExists(absolutePath)) {
    throw new Error(`File already exists: ${absolutePath}`);
  }
  
  // 3. Ensure directory exists
  const directory = path.dirname(absolutePath);
  if (!directoryExists(directory)) {
    await fs.mkdir(directory, { recursive: true });
  }
  
  // 4. Write file with proper error handling
  try {
    await fs.writeFile(absolutePath, content, 'utf-8');
    return true;
  } catch (error) {
    throw new Error(`Failed to create file: ${error.message}`);
  }
}
```

### Modifying Existing Files

```javascript
// Pattern for modifying existing files
async function modifyFile(absolutePath, modifications) {
  // 1. Validate path
  if (!isValidPath(absolutePath)) {
    throw new Error(`Invalid path: ${absolutePath}`);
  }
  
  // 2. Check file exists
  if (!fileExists(absolutePath)) {
    throw new Error(`File does not exist: ${absolutePath}`);
  }
  
  // 3. Read current content
  let content;
  try {
    content = await fs.readFile(absolutePath, 'utf-8');
  } catch (error) {
    throw new Error(`Failed to read file for modification: ${error.message}`);
  }
  
  // 4. Apply modifications (with potential backup)
  const originalContent = content;
  try {
    // Apply each modification - example for line replacements
    for (const mod of modifications) {
      if (mod.type === 'replace') {
        content = content.replace(mod.target, mod.replacement);
      } else if (mod.type === 'insert') {
        // Handle other modification types
      }
    }
    
    // 5. Write back with proper error handling
    await fs.writeFile(absolutePath, content, 'utf-8');
    return true;
  } catch (error) {
    // 6. Consider restoring from backup on failure
    throw new Error(`Failed to modify file: ${error.message}`);
  }
}
```

### Safe File Replacement Pattern

```javascript
// Pattern for safely replacing entire file contents
async function safelyReplaceFile(absolutePath, newContent) {
  // 1. Validate inputs
  if (!isValidPath(absolutePath) || newContent === undefined) {
    throw new Error(`Invalid parameters for file replacement`);
  }
  
  // 2. Check file exists
  if (!fileExists(absolutePath)) {
    throw new Error(`File does not exist: ${absolutePath}`);
  }
  
  // 3. Create backup
  const backupPath = `${absolutePath}.bak`;
  try {
    await fs.copyFile(absolutePath, backupPath);
  } catch (error) {
    throw new Error(`Failed to create backup: ${error.message}`);
  }
  
  // 4. Write new content
  try {
    await fs.writeFile(absolutePath, newContent, 'utf-8');
    // 5. Remove backup if successful
    await fs.unlink(backupPath);
    return true;
  } catch (error) {
    // 6. Restore from backup on failure
    try {
      await fs.copyFile(backupPath, absolutePath);
      await fs.unlink(backupPath);
    } catch (restoreError) {
      throw new Error(`Failed to restore backup after error: ${restoreError.message}`);
    }
    throw new Error(`Failed to replace file: ${error.message}`);
  }
}
```

## Directory Operations

### Creating Directories

```javascript
// Pattern for creating directory structures
async function createDirectory(absolutePath) {
  // 1. Validate path
  if (!isValidPath(absolutePath)) {
    throw new Error(`Invalid path: ${absolutePath}`);
  }
  
  // 2. Check if already exists
  if (directoryExists(absolutePath)) {
    // Already exists - not an error
    return true;
  }
  
  // 3. Create with proper error handling
  try {
    await fs.mkdir(absolutePath, { recursive: true });
    return true;
  } catch (error) {
    throw new Error(`Failed to create directory: ${error.message}`);
  }
}
```

### Listing Directory Contents

```javascript
// Pattern for listing directory contents
async function listDirectory(absolutePath) {
  // 1. Validate path
  if (!isValidPath(absolutePath)) {
    throw new Error(`Invalid path: ${absolutePath}`);
  }
  
  // 2. Check directory exists
  if (!directoryExists(absolutePath)) {
    throw new Error(`Directory does not exist: ${absolutePath}`);
  }
  
  // 3. List contents with proper error handling
  try {
    const entries = await fs.readdir(absolutePath, { withFileTypes: true });
    
    // 4. Format and return results
    return entries.map(entry => ({
      name: entry.name,
      path: path.join(absolutePath, entry.name),
      isDirectory: entry.isDirectory(),
      isFile: entry.isFile()
    }));
  } catch (error) {
    throw new Error(`Failed to list directory: ${error.message}`);
  }
}
```

## Implementation Contexts

### For New Projects

- **Scaffold Project Structure**: Create standardized directory structures with appropriate configuration files
- **Template File Creation**: Use templates for common file types (components, models, etc.)
- **Configuration Initialization**: Set up common configuration files (lint, test, build, etc.)

### For Existing Projects

- **Pattern Identification**: Analyze existing files to identify naming conventions and structure
- **Consistent Modification**: Follow existing patterns when modifying or creating files
- **Cautious Changes**: Be more conservative with modifications to established files

## Best Practices for AI Assistants

### Pre-operation Steps

1. **Analyze Context**: Understand current project structure and conventions
2. **Validate Paths**: Ensure all paths are valid and absolute
3. **Check Existence**: Verify whether files/directories exist before operations
4. **Confirm Destructive Actions**: Get explicit confirmation before potential data loss

### During Operations

1. **Atomic Changes**: Complete file operations fully or not at all
2. **Progressive Feedback**: Provide updates during multi-step operations
3. **Handle Errors**: Catch and handle exceptions with meaningful messages
4. **Maintain Backups**: Create backups for critical file modifications

### Post-operation Steps

1. **Verify Results**: Confirm successful completion of operations
2. **Summarize Changes**: Provide a summary of what was modified
3. **Cleanup**: Remove temporary or backup files when no longer needed
4. **Suggest Next Steps**: Recommend related actions based on the changes made

## Common File Operation Patterns

### Configuration File Updates

```
1. Read existing configuration file
2. Parse into appropriate format (JSON, YAML, etc.)
3. Make targeted modifications to specific properties
4. Validate modified configuration
5. Write back to file with same formatting
```

### Source Code Modifications

```
1. Parse code to understand structure
2. Identify exact insertion/modification points
3. Generate changes that match code style
4. Apply changes with proper indentation
5. Verify syntax validity
```

### Multi-file Refactoring

```
1. Analyze all affected files
2. Create a dependency graph of changes
3. Make changes in correct order (dependencies first)
4. Maintain consistent naming and imports
5. Update all references
```

## Error Handling and Recovery

- **Detailed Error Messages**: Provide specific information about what went wrong
- **Suggested Fixes**: Offer potential solutions for common errors
- **Automatic Recovery**: Restore from backups when operations fail
- **Partial Success Handling**: Deal appropriately with partially completed operations
- **Retry Strategies**: Implement appropriate retry logic for transient failures