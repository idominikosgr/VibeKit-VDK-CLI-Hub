---
description: "Guidelines for AI assistants to effectively search and navigate codebases."
globs: []
alwaysApply: false
version: "2.0.0"
lastUpdated: "2025-05-14"
compatibleWith:
  - "Memory-MCP"
  - "Sequential-Thinking-Advanced"
---


# Code Search and Navigation for AI Assistants

## Overview

Effective code search and navigation is essential for AI assistants to understand, modify, and generate contextually appropriate code. This guide provides standardized patterns for searching codebases, navigating file structures, and extracting relevant information to support development tasks.

## Core Principles

- **Context Preservation**: Maintain awareness of the broader codebase while focusing on specific sections
- **Progressive Exploration**: Start with broad searches, then narrow down to specific details
- **Pattern Recognition**: Identify recurring patterns and conventions across the codebase
- **Relevance Filtering**: Prioritize results based on relevance to the current task
- **Efficient Querying**: Construct effective search queries to minimize unnecessary exploration
- **Structure Awareness**: Respect and leverage the project's organizational structure

## Search Strategies

### Text-Based Search

```javascript
// Pattern for text-based search across files
async function searchCodebaseText(searchDirectory, query, options = {}) {
  const {
    caseSensitive = false,
    wholeWord = false,
    includePatterns = ['**/*.{js,jsx,ts,tsx,py,java,rb,go,rust,c,cpp,cs}'],
    excludePatterns = ['**/node_modules/**', '**/build/**', '**/dist/**'],
    maxResults = 50
  } = options;
  
  // 1. Validate inputs
  if (!directoryExists(searchDirectory)) {
    throw new Error(`Search directory does not exist: ${searchDirectory}`);
  }
  
  if (!query || typeof query !== 'string') {
    throw new Error('Search query must be a non-empty string');
  }
  
  // 2. Build search command (using grep or similar)
  const searchCommand = buildSearchCommand({
    directory: searchDirectory,
    query,
    caseSensitive,
    wholeWord,
    includePatterns,
    excludePatterns,
    maxResults
  });
  
  // 3. Execute search with proper error handling
  try {
    const results = await executeCommand(searchCommand);
    
    // 4. Parse and format results
    return parseSearchResults(results);
  } catch (error) {
    throw new Error(`Search failed: ${error.message}`);
  }
}
```

### Semantic Code Search

```javascript
// Pattern for semantic code search
async function searchCodebaseSemantic(searchDirectory, query, options = {}) {
  const {
    resultType = 'all', // 'function', 'class', 'variable', 'all'
    language = 'auto',
    maxResults = 20,
    includeDefinitions = true,
    includeReferences = true
  } = options;
  
  // 1. Validate inputs
  if (!directoryExists(searchDirectory)) {
    throw new Error(`Search directory does not exist: ${searchDirectory}`);
  }
  
  // 2. Build semantic search query
  const searchQuery = buildSemanticSearchQuery({
    query,
    resultType,
    language,
    includeDefinitions,
    includeReferences,
    maxResults
  });
  
  // 3. Execute semantic search
  try {
    const results = await executeSemanticSearch(searchDirectory, searchQuery);
    
    // 4. Process and return results
    return processSemanticResults(results);
  } catch (error) {
    throw new Error(`Semantic search failed: ${error.message}`);
  }
}
```

### Structure-Based Search

```javascript
// Pattern for structure-based searching
async function findByStructure(searchDirectory, structurePattern, options = {}) {
  const {
    language = 'auto',
    maxDepth = Infinity,
    maxResults = 30
  } = options;
  
  // 1. Validate structure pattern
  if (!isValidStructurePattern(structurePattern)) {
    throw new Error('Invalid structure pattern');
  }
  
  // 2. Build structure query
  const query = buildStructureQuery(structurePattern, language);
  
  // 3. Execute structure search
  try {
    const results = await executeStructureSearch(searchDirectory, query, maxDepth, maxResults);
    
    // 4. Format and return results
    return formatStructureResults(results);
  } catch (error) {
    throw new Error(`Structure search failed: ${error.message}`);
  }
}
```

## File Navigation Patterns

### Exploring Project Structure

```javascript
// Pattern for exploring directory structure
async function exploreProjectStructure(rootDirectory, options = {}) {
  const {
    maxDepth = 3,
    includeFiles = true,
    excludePatterns = ['**/node_modules/**', '**/build/**', '**/dist/**']
  } = options;
  
  // 1. Validate root directory
  if (!directoryExists(rootDirectory)) {
    throw new Error(`Directory does not exist: ${rootDirectory}`);
  }
  
  // 2. Build directory exploration command
  const explorationCommand = buildExplorationCommand({
    directory: rootDirectory,
    maxDepth,
    includeFiles,
    excludePatterns
  });
  
  // 3. Execute exploration
  try {
    const output = await executeCommand(explorationCommand);
    
    // 4. Parse and structure results
    return parseDirectoryStructure(output);
  } catch (error) {
    throw new Error(`Failed to explore project structure: ${error.message}`);
  }
}
```

### Code Navigation by Symbol

```javascript
// Pattern for navigating to symbol definitions
async function navigateToSymbol(codebase, symbolName, options = {}) {
  const {
    symbolType = 'any', // 'function', 'class', 'variable', 'any'
    exactMatch = false,
    maxResults = 10
  } = options;
  
  // 1. Validate inputs
  if (!symbolName || typeof symbolName !== 'string') {
    throw new Error('Symbol name must be a non-empty string');
  }
  
  // 2. Build symbol search query
  const symbolQuery = buildSymbolQuery({
    name: symbolName,
    type: symbolType,
    exactMatch
  });
  
  // 3. Execute symbol search
  try {
    const results = await findSymbolDefinitions(codebase, symbolQuery, maxResults);
    
    // 4. Format and return results
    return formatSymbolResults(results);
  } catch (error) {
    throw new Error(`Symbol navigation failed: ${error.message}`);
  }
}
```

## Context Building

### Dependency Analysis

```javascript
// Pattern for analyzing dependencies between files
async function analyzeDependencies(targetFile, options = {}) {
  const {
    direction = 'both', // 'imports', 'importedBy', 'both'
    depth = 2,
    includeExternal = false
  } = options;
  
  // 1. Validate target file
  if (!fileExists(targetFile)) {
    throw new Error(`Target file does not exist: ${targetFile}`);
  }
  
  // 2. Build dependency analysis query
  const analysisQuery = buildDependencyQuery({
    file: targetFile,
    direction,
    depth,
    includeExternal
  });
  
  // 3. Execute dependency analysis
  try {
    const dependencyMap = await executeAnalysis(analysisQuery);
    
    // 4. Process and visualize dependencies
    return processDependencyResults(dependencyMap);
  } catch (error) {
    throw new Error(`Dependency analysis failed: ${error.message}`);
  }
}
```

### Code Understanding

```javascript
// Pattern for building contextual understanding of code
async function buildCodeContext(codeElement, options = {}) {
  const {
    includeUsages = true,
    includeDefinition = true,
    includeRelated = true,
    maxRelated = 5
  } = options;
  
  // 1. Get element definition
  let context = {};
  if (includeDefinition) {
    context.definition = await getElementDefinition(codeElement);
  }
  
  // 2. Find usages
  if (includeUsages) {
    context.usages = await findElementUsages(codeElement);
  }
  
  // 3. Find related elements
  if (includeRelated) {
    context.related = await findRelatedElements(codeElement, maxRelated);
  }
  
  // 4. Build comprehensive context
  return formatCodeContext(context);
}
```

## Effective Search Patterns for Common Tasks

### Finding Implementations

```
1. Start with a broad search for the interface or base class
2. Analyze the found interface/class to understand the contract
3. Search for implementation classes using the interface name
4. Verify each potential implementation by checking inheritance
5. Build a map of implementations with their specific features
```

### Tracing Data Flow

```
1. Start at data origin (API endpoint, database query, user input)
2. Find where the data is initially structured/stored
3. Search for usages of the data structure or variable
4. Follow the chain of function calls and transformations
5. Identify all endpoints where the data is used
```

### Understanding Feature Implementation

```
1. Start with UI components or entry points
2. Trace user interactions to handler functions
3. Follow the execution path through service and utility functions
4. Identify data access and modification points
5. Map the complete feature flow from input to output
```

## Search Query Optimization

### Text Search Query Best Practices

- **Use Distinctive Terms**: Choose terms unique to the functionality you're seeking
- **Include Type Information**: Add type names or annotations for more specific results
- **Use Function Signatures**: Search for function parameter patterns
- **Combine With Filename Patterns**: Restrict searches to relevant file types
- **Exclude Test and Generated Code**: When appropriate, to reduce noise

### Semantic Search Query Best Practices

- **Focus on Concepts**: Describe functionality rather than specific syntax
- **Use Domain Terminology**: Employ terms specific to the project domain
- **Specify Relationships**: Describe how components interact
- **Include Expected Types**: Mention expected input/output types
- **Reference Known Components**: Anchor searches with known system components

## Search Result Processing

### Filtering and Prioritization

```javascript
// Pattern for processing and prioritizing search results
function prioritizeResults(searchResults, context) {
  // 1. Remove irrelevant results
  const filteredResults = searchResults.filter(result => 
    isRelevantResult(result, context));
  
  // 2. Score results based on relevance factors
  const scoredResults = filteredResults.map(result => ({
    ...result,
    relevanceScore: calculateRelevanceScore(result, context)
  }));
  
  // 3. Sort by relevance score
  const sortedResults = scoredResults.sort((a, b) => 
    b.relevanceScore - a.relevanceScore);
  
  // 4. Group related results
  return groupRelatedResults(sortedResults);
}
```

### Result Summarization

```javascript
// Pattern for summarizing search results
function summarizeSearchResults(results, options = {}) {
  const {
    maxDetailedResults = 5,
    includeSummaryStats = true,
    groupByCategory = true
  } = options;
  
  // 1. Generate detailed information for top results
  const detailedResults = results
    .slice(0, maxDetailedResults)
    .map(result => generateDetailedInfo(result));
  
  // 2. Create brief summaries for remaining results
  const briefSummaries = results
    .slice(maxDetailedResults)
    .map(result => generateBriefSummary(result));
  
  // 3. Generate summary statistics if requested
  const summaryStats = includeSummaryStats
    ? generateResultStatistics(results)
    : null;
  
  // 4. Structure the complete summary
  return formatSearchSummary({
    detailedResults,
    briefSummaries,
    summaryStats,
    groupByCategory: groupByCategory ? groupResultsByCategory(results) : null
  });
}
```

## AI-Specific Navigation Patterns

### Progressive Codebase Exploration

```
1. Start with high-level directory structure to understand organization
2. Identify key entry points (main files, configuration, etc.)
3. Examine representative files to understand code style and patterns
4. Build a mental model of the architecture and component relationships
5. Perform targeted searches based on this model
```

### Understanding Flow and Context

```
1. Identify starting point (function, class, or file) based on user question
2. Analyze inputs, outputs, and dependencies of the starting point
3. Trace dependencies both upstream and downstream
4. Identify related components that affect or are affected by this code
5. Build a comprehensive context model to inform responses
```

### Efficient Context Gathering

```
1. Start with the minimal context needed to understand the question
2. Progressively expand context only as needed to answer questions
3. Prioritize reading definition files, interfaces, and documentation
4. Cache important context for future reference
5. Periodically summarize findings to maintain focus
```

## Best Practices for AI Assistants

- **Start Broad, Then Narrow**: Begin with high-level exploration before detailed searches
- **Maintain Context**: Keep track of previously discovered information
- **Use Multiple Search Strategies**: Combine text, semantic, and structure-based approaches
- **Consider File Types**: Different languages and frameworks require different search strategies
- **Follow Project Conventions**: Adapt search patterns to match project structure and naming
- **Explain Search Logic**: When appropriate, share the reasoning behind search strategies
- **Handle Large Codebases**: Use incremental and targeted searches for large projects
- **Balance Search Depth**: Know when to explore deeply vs. broadly