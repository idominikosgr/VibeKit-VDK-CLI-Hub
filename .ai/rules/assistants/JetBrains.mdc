---
description: "Guidelines for optimizing interactions with JetBrains IDEs and their AI assistants for code generation and development workflows."
globs: []
alwaysApply: false
version: "2.0.0"
lastUpdated: "2025-05-17"
platforms:
  - "jetbrains"
---


# JetBrains IDEs AI Assistant Optimization

JetBrains offers a suite of powerful IDEs with integrated AI assistant capabilities. This guide provides best practices for optimizing interactions with JetBrains AI assistants to enhance code generation, comprehension, and maintenance tasks across IntelliJ IDEA, PyCharm, WebStorm, and other JetBrains products.

## JetBrains AI Features

- **Chat Interface**: JetBrains IDEs provide a chat interface for direct interaction with AI assistants.
- **Inline Suggestions**: AI plugins offer inline code suggestions as you type.
- **Code Generation**: Generate entire functions, classes, or files based on natural language prompts.
- **Code Explanation**: Get explanations of existing code and answers about it.
- **Refactoring Assistance**: Identify and implement code improvements.
- **Smart Completions**: Context-aware code completion suggestions.
- **Documentation Generation**: Auto-generate documentation for your code.

## JetBrains AI Plugins

- **AI Assistant**: JetBrains' native AI coding assistant with chat capabilities.
- **MCP Integration**: Support for Model Context Protocol to connect with various AI models.
- **GitHub Copilot**: Integration with GitHub's AI pair programmer.
- **Other AI Plugins**: Various specialized AI plugins available in the JetBrains marketplace.

## Common Command Patterns

- **Chat Commands**: Use the AI Assistant tool window for direct interaction.
- **Action Menu**: Access AI features through Alt+Enter menu on code selections.
- **Context-Aware Actions**: Right-click options for AI assistance on selected code.
- **Tab Completion**: Accept inline suggestions with Tab key.
- **Project Navigation**: AI can help navigate complex project structures.

## Effective Prompt Strategies

- **Be Specific**: Provide clear, detailed instructions about what you need.
- **Include Context**: Reference relevant files, functions, or classes.
- **Specify Language/Framework**: Mention the programming language or framework you're using.
- **Incremental Refinement**: Start with a basic request, then refine with follow-up prompts.
- **Specify Output Format**: Indicate how you want the response formatted (e.g., code only, explanations, etc.).

## Code Generation Best Practices

- **Describe Input/Output**: Clearly describe inputs, outputs, and expected behavior.
- **Mention Edge Cases**: Specify how edge cases should be handled.
- **Reference Related Code**: Point to similar functionality in your codebase.
- **Specify Style Guide**: Mention coding style/convention requirements.
- **Request Tests**: Ask for tests alongside generated code when appropriate.

## Optimizing for JetBrains' Capabilities

- **Project Structure Awareness**: JetBrains IDEs understand project structure deeply.
- **Build System Integration**: Can interact with Gradle, Maven, etc.
- **Database Tools**: Can assist with database queries and schema design.
- **Framework-Specific Features**: Understand framework-specific patterns (Spring, Django, React, etc.).
- **Version Control Integration**: Can help with Git operations and code review.

## Project Organization Tips

- **Clean Workspace**: Keep your workspace organized for better AI understanding.
- **Use Project Model**: Properly structure projects according to JetBrains project model.
- **Descriptive Names**: Use meaningful names for files, functions, and variables.
- **Documentation**: Include README files and code comments for better context.
- **Consistent Style**: Maintain consistent coding style throughout your project.

## Step-by-Step Process

1. **Define Task Clearly**: Outline what you need before engaging the AI.
2. **Provide Context**: Reference relevant files and project constraints.
3. **Review Suggestions**: Carefully review AI-generated code before accepting.
4. **Refine Iteratively**: Use follow-up prompts to improve initial responses.
5. **Integrate Solutions**: Apply the final solution to your codebase.

## JetBrains-Specific MCP Configuration

JetBrains IDEs use a plugin-based approach for MCP integration, with settings configured through:

- The IDE settings UI at Settings | Tools | AI Assistant | Model Context Protocol (MCP)
- When used with Claude Desktop, the MCP configuration is added to Claude's configuration file at `~/Library/Application Support/Claude/claude_desktop_config.json`

Configuration directories for JetBrains products (where XX is the version number):
- Configuration directory: `~/Library/Preferences/IntelliJIdeaXX`
- System directory: `~/Library/Caches/IntelliJIdeaXX`
- Plugins directory: `~/Library/Application Support/IntelliJIdeaXX`
- Logs directory: `~/Library/Logs/IntelliJIdeaXX`

For other JetBrains IDEs, replace "IntelliJIdea" with the appropriate product name like "PyCharm", "WebStorm", etc.
