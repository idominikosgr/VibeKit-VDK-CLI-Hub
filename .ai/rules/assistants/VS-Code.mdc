---
description: "Guidelines for optimizing interactions with VS Code and its AI assistants for code generation and development workflows."
globs: []
alwaysApply: false
version: "2.0.0"
lastUpdated: "2025-05-17"
platforms:
  - "vscode"
  - "vscode-insiders"
---


# VS Code AI Assistant Optimization

VS Code is a popular code editor with integrated AI assistant capabilities through extensions. This guide provides best practices for optimizing interactions with VS Code's AI assistants to enhance code generation, comprehension, and maintenance tasks.

## VS Code AI Features

- **Chat Interface**: VS Code provides a chat interface for direct interaction with AI assistants.
- **Inline Suggestions**: AI extensions can offer inline code suggestions as you type.
- **Code Generation**: Generate entire functions, classes, or files based on natural language prompts.
- **Code Explanation**: Get explanations of existing code and answers about it.
- **Refactoring Assistance**: Identify and implement code improvements.
- **Debugging Help**: Get assistance with debugging and problem-solving.

## VS Code AI Extensions

- **GitHub Copilot**: Microsoft's AI pair programmer, offering code completions and chat capabilities.
- **IntelliCode**: Microsoft's AI-assisted IntelliSense providing context-aware completions.
- **Various MCP-Compatible Extensions**: Extensions that leverage the Model Context Protocol for AI integration.

## Common Command Patterns

- **Chat Commands**: Prefix commands with `/` in the chat interface for specific actions.
- **Command Palette**: Access AI features through the command palette (Cmd+Shift+P or Ctrl+Shift+P).
- **Context Menu**: Right-click options for AI assistance on selected code.
- **Reference Files**: Use `@` to reference files in the chat interface.

## Effective Prompt Strategies

- **Be Specific**: Provide clear, detailed instructions about what you need.
- **Include Context**: Reference relevant files, functions, or classes.
- **Specify Language/Framework**: Mention the programming language or framework you're using.
- **Incremental Refinement**: Start with a basic request, then refine with follow-up prompts.
- **Specify Output Format**: Indicate how you want the response formatted (e.g., code only, explanations, etc.).

## Code Generation Best Practices

- **Describe Input/Output**: Clearly describe inputs, outputs, and expected behavior.
- **Mention Edge Cases**: Specify how edge cases should be handled.
- **Reference Related Code**: Point to similar functionality in your codebase.
- **Specify Style Guide**: Mention coding style/convention requirements.
- **Request Tests**: Ask for tests alongside generated code when appropriate.

## Optimizing for VS Code's Capabilities

- **Workspace-Aware**: VS Code AI assistants can access and understand your workspace files.
- **Settings-Aware**: AI features can reference your VS Code settings.
- **Extension-Aware**: Consider mentioning relevant extensions in your prompts.
- **Terminal Integration**: Can assist with terminal commands and operations.
- **Debugging Context**: Can help with issues in the context of your debugging session.

## Project Organization Tips

- **Clean Workspace**: Keep your workspace organized for better AI understanding.
- **Clear File Structure**: Well-structured projects improve AI context understanding.
- **Descriptive Names**: Use meaningful names for files, functions, and variables.
- **Documentation**: Include README files and code comments for better context.
- **Consistent Style**: Maintain consistent coding style throughout your project.

## Step-by-Step Process

1. **Define Task Clearly**: Outline what you need before engaging the AI.
2. **Provide Context**: Reference relevant files and project constraints.
3. **Review Suggestions**: Carefully review AI-generated code before accepting.
4. **Refine Iteratively**: Use follow-up prompts to improve initial responses.
5. **Integrate Solutions**: Apply the final solution to your codebase.

## VS Code-Specific MCP Configuration

The VS Code MCP configuration is typically found at:
- Workspace level: `.vscode/mcp.json`
- User level: `~/Library/Application Support/Code/User/settings.json`
- VS Code Insiders: `~/Library/Application Support/Code - Insiders/User/settings.json`

Settings can be configured through the UI (Cmd+, or Ctrl+,) or by editing these files directly.
