---
description: "Guidelines for optimizing interactions with Zed Editor and its AI assistants for code generation and development workflows."
globs: []
alwaysApply: false
version: "2.0.0"
lastUpdated: "2025-05-17"
platforms:
  - "zed"
---


# Zed Editor AI Assistant Optimization

Zed is a high-performance, modern code editor with AI assistant capabilities. This guide provides best practices for optimizing interactions with Zed's AI assistants to enhance code generation, comprehension, and maintenance tasks.

## Zed AI Features

- **Chat Interface**: Zed provides a chat interface for direct interaction with AI assistants.
- **Inline Suggestions**: Receive inline code suggestions as you type.
- **Code Generation**: Generate entire functions, classes, or files based on natural language prompts.
- **Code Explanation**: Get explanations of existing code and answers about it.
- **Refactoring Assistance**: Identify and implement code improvements.
- **Fast Response**: Benefit from Zed's performance-focused design for AI interactions.

## Common Command Patterns

- **Chat Commands**: Access the AI assistant through the dedicated chat panel.
- **Keyboard Shortcuts**: Use keyboard shortcuts to accept AI suggestions.
- **Command Bar**: Access AI features through the command bar.
- **Context Menu**: Right-click options for AI assistance on selected code.
- **File References**: Reference files by path to provide context.

## Effective Prompt Strategies

- **Be Specific**: Provide clear, detailed instructions about what you need.
- **Include Context**: Reference relevant files, functions, or classes.
- **Specify Language/Framework**: Mention the programming language or framework you're using.
- **Incremental Refinement**: Start with a basic request, then refine with follow-up prompts.
- **Specify Output Format**: Indicate how you want the response formatted (e.g., code only, explanations, etc.).

## Code Generation Best Practices

- **Describe Input/Output**: Clearly describe inputs, outputs, and expected behavior.
- **Mention Edge Cases**: Specify how edge cases should be handled.
- **Reference Related Code**: Point to similar functionality in your codebase.
- **Specify Style Guide**: Mention coding style/convention requirements.
- **Request Tests**: Ask for tests alongside generated code when appropriate.

## Optimizing for Zed's Capabilities

- **Performance Focus**: Leverage Zed's performance-oriented design for faster interactions.
- **Project Navigation**: Ask for help navigating your project structure.
- **Collaborative Editing**: Consider AI assistance in collaborative editing sessions.
- **Customizable Workflows**: Integrate AI assistance into customized workflows.
- **Lightweight Interface**: Take advantage of Zed's clean, focused UI when working with AI.

## Project Organization Tips

- **Clean Workspace**: Keep your workspace organized for better AI understanding.
- **Clear File Structure**: Well-structured projects improve AI context understanding.
- **Descriptive Names**: Use meaningful names for files, functions, and variables.
- **Documentation**: Include README files and code comments for better context.
- **Consistent Style**: Maintain consistent coding style throughout your project.

## Step-by-Step Process

1. **Define Task Clearly**: Outline what you need before engaging the AI.
2. **Provide Context**: Reference relevant files and project constraints.
3. **Review Suggestions**: Carefully review AI-generated code before accepting.
4. **Refine Iteratively**: Use follow-up prompts to improve initial responses.
5. **Integrate Solutions**: Apply the final solution to your codebase.

## Zed-Specific Configuration

The Zed configuration files are typically found at:

- Settings: `~/.zed/settings.json` (on macOS)
- Keybindings: `~/.zed/keymap.json` (on macOS)
- Log file: `~/Library/Logs/Zed/Zed.log`
- Database: `~/Library/Application Support/Zed/db`
- Custom themes: `~/.config/zed/themes/`

Configure AI features through these settings files or the Zed preferences interface.
