---
description: "Guidelines for optimizing interactions with Windsurf AI assistant for code generation and development workflows."
globs: []
alwaysApply: false
version: "2.1.0"
lastUpdated: "2025-05-18"
compatibleWith:
  - "Memory-MCP"
  - "AI-Workflow-Integration"
---


# Windsurf AI Assistant Optimization

## Overview

Windsurf is an AI-powered coding assistant that offers code completions, explanations, and generation capabilities. This guide provides best practices for optimizing interactions with Windsurf's AI assistant to enhance code generation, comprehension, and development tasks.

## Interaction Model

- **Inline Code Completions**: Windsurf offers intelligent code completions as you type.
- **Chat Interface**: Windsurf provides a chat interface for complex interactions and explanations.
- **Context-Aware Suggestions**: Windsurf analyzes your codebase for relevant suggestions.
- **Multi-Language Support**: Windsurf works across numerous programming languages and frameworks.
- **Tool Integration**: Windsurf can leverage development tools and execute commands.

## Effective Prompt Patterns

### Code Generation Prompts

- **Be Specific and Detailed**: Include comprehensive requirements.
  ```
  Create a Python function that parses log files with this format: timestamp [log_level] service_name: message. Extract each component into a structured dictionary and handle malformed lines gracefully.
  ```

- **Specify Technologies and Versions**: Mention frameworks, libraries, and versions.
  ```
  Using React 18 with TypeScript, create a custom hook that manages pagination state for API data fetching.
  ```

- **Reference Existing Code Patterns**: Point to existing patterns in your codebase.
  ```
  I have a UserService class that follows the repository pattern. Create a similar ProductService class that follows the same architecture.
  ```

- **Provide Example Inputs/Outputs**: Include examples for clarity.
  ```
  Create a function that transforms data in this format:
  Input: {"users": [{"name": "John", "age": 30}, {"name": "Jane", "age": 25}]}
  Output: [{"fullName": "John", "ageInMonths": 360}, {"fullName": "Jane", "ageInMonths": 300}]
  ```

### Code Understanding Prompts

- **Ask Targeted Questions**: Focus on specific aspects of the code.
  ```
  Explain how the caching mechanism in this fetchUserData function works, particularly the key generation logic and expiration handling.
  ```

- **Request Step-by-Step Analysis**: For complex functions.
  ```
  Walk through this recursive algorithm step by step, explaining what happens in each iteration and how the base case is reached.
  ```

- **Ask for Pattern Identification**: For understanding code architecture.
  ```
  Identify the design patterns used in this authentication module and explain how they interact.
  ```

### Implementation and Refactoring

- **Request Direct Implementation**: For straightforward tasks.
  ```
  Implement a throttle function that limits a given function to being called at most once every 200ms.
  ```

- **Ask for Refactoring with Goals**: Specify refactoring objectives.
  ```
  Refactor this function to improve performance by reducing redundant API calls and implementing proper caching.
  ```

- **Request Incremental Changes**: Break down complex refactoring.
  ```
  First, identify all the side effects in this component. Then, suggest how we can extract them into custom hooks.
  ```

## Optimizing for Windsurf's Agentic Capabilities

### Tool Usage and Command Execution

- **Specify Environment Context**: Provide OS and environment information.
  ```
  I'm working on a macOS system with Node.js 18 installed. Help me set up a TypeScript project with Jest for testing.
  ```

- **Request Specific Command Execution**: For environment setup or project tasks.
  ```
  Create a Python virtual environment, install Flask and SQLAlchemy, and set up a basic project structure.
  ```

- **File Operations Guidance**: For creating and modifying files.
  ```
  Create a new React component in the src/components directory following our project's file structure convention.
  ```

### Context Utilization

- **Reference Open Files**: Direct attention to specific files.
  ```
  Looking at the currently open UserModel.js file, create a similar model for Products.
  ```

- **Specify File Relationships**: Explain connections between files.
  ```
  The auth.service.ts handles authentication, while user.service.ts manages user data. I need to create a profile.service.ts that works with both.
  ```

- **Provide Broader Project Context**: Give architectural context.
  ```
  This project follows a Clean Architecture approach with layers for domain, application, and infrastructure. Help me create a new feature respecting these boundaries.
  ```

### Iterative Development

- **Start Small, Then Expand**: Begin with core functionality.
  ```
  First, let's implement the basic user registration function without validation. Then we'll add validation and error handling.
  ```

- **Request Alternatives**: Ask for different approaches.
  ```
  Show me two different ways to implement this state management: one using Context API and another using Redux.
  ```

- **Provide Feedback and Refinement**: Guide iterative improvement.
  ```
  This implementation works but has performance issues with large datasets. Let's optimize it focusing on the processing loop.
  ```

## Advanced Interaction Techniques

### Memory and Context Persistence

- **Reference Previous Discussions**: Build on earlier conversations.
  ```
  Earlier we created a user authentication system. Now I need to add role-based authorization that integrates with it.
  ```

- **Create Persistent Context**: Establish long-term project memory.
  ```
  For this project, remember that we're using MongoDB for data storage, Express for the API, React for the frontend, and following a microservices architecture.
  ```

- **Update Contextual Understanding**: Correct or update context.
  ```
  We've switched from REST API to GraphQL for this service. Please adjust your recommendations accordingly.
  ```

### Multi-File Operations

- **Request Coordinated Changes**: For changes across multiple files.
  ```
  We need to update our authentication system. This will require changes to auth.service.ts, user.model.ts, and the auth middleware.
  ```

- **Specify File Creation Hierarchy**: For new modules or features.
  ```
  Create a new blog feature with these files: blog.model.ts, blog.service.ts, blog.controller.ts, and the necessary test files.
  ```

## Common Pitfalls to Avoid

- **Vague Requests**: Avoid general requests like "improve this code" without specific goals.
- **Ignoring Error Handling**: Always specify how errors should be handled in generated code.
- **Incomplete Context**: Failing to mention important project constraints or requirements.
- **Skipping Validation**: Always request validation for user inputs and external data.
- **Security Assumptions**: Be explicit about security requirements, never assume them.

## Best Practices for Productivity

- **Use Templates for Common Requests**: Develop standard prompts for recurring tasks.
- **Combine Natural Language with Code**: Mix explanatory text with code snippets.
- **Verify Generated Code**: Always review and test AI-generated code before deployment.
- **Learn from Mistakes**: Take note of when Windsurf misunderstands to improve future prompts.
- **Maintain a Clear Problem Statement**: Restate complex problems clearly before asking for solutions.

## Recommended Workflow with Windsurf

1. **Define Requirements**: Clearly outline what you need to build.
2. **Share Context**: Provide relevant project and file context.
3. **Start with Structure**: Request overall structure before implementation details.
4. **Implement Incrementally**: Develop and test in manageable chunks.
5. **Review and Refine**: Critically examine suggestions and request improvements.
6. **Document and Test**: Ensure proper documentation and test coverage.