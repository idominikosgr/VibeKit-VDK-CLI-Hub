---
description: Best practices for building cross-platform mobile applications with React Native, Expo, and related technologies.
globs: ["**/*.{ts", "tsx", "js", "jsx}", "**/app.json", "**/metro.config.js"]
alwaysApply: false
version: "2.0.0"
lastUpdated: "2025-05-14"
compatibleWith: ["TypeScript-Modern","React19"]
---

# Mobile/Cross-Platform React Native Stack

## Stack Overview

### Core Technologies
- **React Native** for cross-platform mobile development
- **Expo SDK 50+** for simplified development and deployment
- **TypeScript** for type safety

### UI Layer
- **NativeWind** (Tailwind for React Native) or **Tamagui** for styling
- **React Native Paper** or **UI Kitten** as optional component libraries

### Navigation
- **React Navigation 7+** for app navigation

### State Management
- **Zustand** or **Jotai** for UI state
- **TanStack Query** (React Query) for server state

### API Layer
- **tRPC** or **GraphQL with Apollo Client**
- **React Native MMKV** for performance-focused local storage

### DevOps
- **EAS Build** for cloud builds
- **EAS Update** for over-the-air updates

### Testing
- **Jest** for unit testing
- **Testing Library** for component testing
- **Detox** for end-to-end testing

## Project Structure

```
/
u251cu2500u2500 .github/             # GitHub workflows
u251cu2500u2500 assets/              # Static assets (images, fonts, etc.)
u251cu2500u2500 src/
u2502   u251cu2500u2500 app/             # App entrypoint and main screens
u2502   u2502   u251cu2500u2500 (auth)/      # Authentication screens
u2502   u2502   u251cu2500u2500 (tabs)/      # Tab navigator screens
u2502   u2502   u251cu2500u2500 modals/      # Modal screens
u2502   u2502   u2514u2500u2500 _layout.tsx  # Root navigation layout
u2502   u251cu2500u2500 components/      # Reusable components
u2502   u2502   u251cu2500u2500 ui/          # UI components
u2502   u2502   u2514u2500u2500 feature/     # Feature-specific components
u2502   u251cu2500u2500 lib/             # Shared utilities
u2502   u2502   u251cu2500u2500 api/         # API clients
u2502   u2502   u251cu2500u2500 hooks/       # Custom hooks
u2502   u2502   u251cu2500u2500 utils/       # Utility functions
u2502   u2502   u2514u2500u2500 store/       # State management
u2502   u251cu2500u2500 constants/        # App constants and theme
u2502   u2514u2500u2500 types/           # TypeScript definitions
u251cu2500u2500 tests/               # Test files
u251cu2500u2500 app.json             # Expo configuration
u2514u2500u2500 eas.json             # EAS configuration
```

## Expo Setup with TypeScript

### Project Initialization

```bash
npx create-expo-app my-app -t expo-template-typescript
```

### App Configuration

```json
// app.json
{
  "expo": {
    "name": "My App",
    "slug": "my-app",
    "version": "1.0.0",
    "orientation": "portrait",
    "icon": "./assets/icon.png",
    "userInterfaceStyle": "automatic",
    "splash": {
      "image": "./assets/splash.png",
      "resizeMode": "contain",
      "backgroundColor": "#ffffff"
    },
    "assetBundlePatterns": [
      "**/*"
    ],
    "ios": {
      "supportsTablet": true,
      "bundleIdentifier": "com.company.myapp"
    },
    "android": {
      "adaptiveIcon": {
        "foregroundImage": "./assets/adaptive-icon.png",
        "backgroundColor": "#ffffff"
      },
      "package": "com.company.myapp"
    },
    "web": {
      "favicon": "./assets/favicon.png"
    },
    "plugins": [
      [
        "expo-router",
        {
          "root": "src/app"
        }
      ],
      [
        "expo-image",
        {
          "project-id": "your-project-id"
        }
      ]
    ],
    "experiments": {
      "typedRoutes": true,
      "tsconfigPaths": true
    }
  }
}
```

## React Navigation Setup with Expo Router

```typescript
// src/app/_layout.tsx
import { Ionicons } from '@expo/vector-icons';
import FontAwesome from '@expo/vector-icons/FontAwesome';
import { useFonts } from 'expo-font';
import { SplashScreen, Stack, Tabs } from 'expo-router';
import { useEffect } from 'react';
import { useColorScheme } from 'react-native';

export {
  // Catch any errors thrown by the Layout component.
  ErrorBoundary,
} from 'expo-router';

export const unstable_settings = {
  // Ensure that reloading on "/" goes to the tab navigator
  initialRouteName: '(tabs)',
};

// Prevent the splash screen from auto-hiding before asset loading is complete.
SplashScreen.preventAutoHideAsync();

export default function RootLayout() {
  const [loaded, error] = useFonts({
    ...FontAwesome.font,
    'SpaceMono': require('../../assets/fonts/SpaceMono-Regular.ttf'),
  });

  // Expo Router uses Error Boundaries to catch errors in the navigation tree.
  useEffect(() => {
    if (error) throw error;
  }, [error]);

  useEffect(() => {
    if (loaded) {
      SplashScreen.hideAsync();
    }
  }, [loaded]);

  if (!loaded) {
    return null;
  }

  return <RootLayoutNav />;
}

function RootLayoutNav() {
  const colorScheme = useColorScheme();

  return (
    <Stack>
      <Stack.Screen name="(tabs)" options={{ headerShown: false }} />
      <Stack.Screen name="(auth)" options={{ headerShown: false }} />
      <Stack.Screen name="modals/settings" options={{ presentation: 'modal', title: 'Settings' }} />
    </Stack>
  );
}
```

### Tab Navigator Setup

```typescript
// src/app/(tabs)/_layout.tsx
import FontAwesome from '@expo/vector-icons/FontAwesome';
import { Tabs } from 'expo-router';
import { useColorScheme } from 'react-native';

export default function TabLayout() {
  const colorScheme = useColorScheme();

  return (
    <Tabs
      screenOptions={{
        tabBarActiveTintColor: colorScheme === 'dark' ? '#fff' : '#000',
      }}>
      <Tabs.Screen
        name="index"
        options={{
          title: 'Home',
          tabBarIcon: ({ color }) => <FontAwesome size={24} name="home" color={color} />,
        }}
      />
      <Tabs.Screen
        name="profile"
        options={{
          title: 'Profile',
          tabBarIcon: ({ color }) => <FontAwesome size={24} name="user" color={color} />,
        }}
      />
      <Tabs.Screen
        name="settings"
        options={{
          title: 'Settings',
          tabBarIcon: ({ color }) => <FontAwesome size={24} name="gear" color={color} />,
        }}
      />
    </Tabs>
  );
}
```

## NativeWind Setup for Styling

```typescript
// babel.config.js
module.exports = function(api) {
  api.cache(true);
  return {
    presets: ['babel-preset-expo'],
    plugins: ["nativewind/babel"],
  };
};

// tailwind.config.js
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: ["./src/**/*.{js,jsx,ts,tsx}"],
  theme: {
    extend: {},
  },
  plugins: [],
};

// App.tsx wrapper for NativeWind
import { StyleSheet, Text, View } from 'react-native';

export default function App() {
  return (
    <View className="flex-1 items-center justify-center bg-white">
      <Text className="text-2xl font-bold text-blue-500">Hello NativeWind!</Text>
    </View>
  );
}
```

## State Management with Zustand

```typescript
// src/lib/store/useAuthStore.ts
import { create } from 'zustand';
import { persist, createJSONStorage } from 'zustand/middleware';
import { MMKV } from 'react-native-mmkv';

const storage = new MMKV();

type AuthState = {
  user: any | null;
  token: string | null;
  isAuthenticated: boolean;
  isLoading: boolean;
  error: string | null;
  login: (email: string, password: string) => Promise<void>;
  logout: () => void;
  register: (email: string, password: string, name: string) => Promise<void>;
};

const storage = {
  getItem: async (name: string): Promise<string | null> => {
    const value = storage.getString(name);
    return value ?? null;
  },
  setItem: async (name: string, value: string): Promise<void> => {
    storage.set(name, value);
  },
  removeItem: async (name: string): Promise<void> => {
    storage.delete(name);
  },
};

export const useAuthStore = create<AuthState>()(
  persist(
    (set, get) => ({
      user: null,
      token: null,
      isAuthenticated: false,
      isLoading: false,
      error: null,
      
      login: async (email, password) => {
        set({ isLoading: true, error: null });
        try {
          // API call to login
          const response = await fetch('https://api.example.com/login', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ email, password }),
          });
          
          const data = await response.json();
          
          if (!response.ok) {
            throw new Error(data.message || 'Login failed');
          }
          
          set({
            user: data.user,
            token: data.token,
            isAuthenticated: true,
            isLoading: false,
          });
        } catch (error) {
          set({
            isLoading: false,
            error: error instanceof Error ? error.message : 'Unknown error occurred',
          });
        }
      },
      
      logout: () => {
        set({
          user: null,
          token: null,
          isAuthenticated: false,
          error: null,
        });
      },
      
      register: async (email, password, name) => {
        set({ isLoading: true, error: null });
        try {
          // API call to register
          const response = await fetch('https://api.example.com/register', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ email, password, name }),
          });
          
          const data = await response.json();
          
          if (!response.ok) {
            throw new Error(data.message || 'Registration failed');
          }
          
          set({
            user: data.user,
            token: data.token,
            isAuthenticated: true,
            isLoading: false,
          });
        } catch (error) {
          set({
            isLoading: false,
            error: error instanceof Error ? error.message : 'Unknown error occurred',
          });
        }
      },
    }),
    {
      name: 'auth-storage',
      storage: createJSONStorage(() => storage),
    }
  )
);
```

## TanStack Query Integration

```typescript
// src/lib/api/apiClient.ts
import axios from 'axios';
import { useAuthStore } from '../store/useAuthStore';

const baseURL = 'https://api.example.com';

const apiClient = axios.create({
  baseURL,
  headers: {
    'Content-Type': 'application/json',
  },
});

// Add request interceptor
apiClient.interceptors.request.use(
  (config) => {
    const token = useAuthStore.getState().token;
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
  },
  (error) => Promise.reject(error)
);

// Add response interceptor
apiClient.interceptors.response.use(
  (response) => response,
  async (error) => {
    // Handle token refresh or logout on 401 Unauthorized
    if (error.response?.status === 401) {
      useAuthStore.getState().logout();
    }
    return Promise.reject(error);
  }
);

export default apiClient;

// src/lib/hooks/useProducts.ts
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import apiClient from '../api/apiClient';

export type Product = {
  id: string;
  name: string;
  price: number;
  description: string;
  image: string;
};

export function useProducts() {
  const queryClient = useQueryClient();
  
  const fetchProducts = async (): Promise<Product[]> => {
    const response = await apiClient.get('/products');
    return response.data;
  };
  
  return useQuery({
    queryKey: ['products'],
    queryFn: fetchProducts,
  });
}

export function useProduct(id: string) {
  const fetchProduct = async (): Promise<Product> => {
    const response = await apiClient.get(`/products/${id}`);
    return response.data;
  };
  
  return useQuery({
    queryKey: ['products', id],
    queryFn: fetchProduct,
    enabled: !!id,
  });
}

export function useCreateProduct() {
  const queryClient = useQueryClient();
  
  return useMutation({
    mutationFn: async (newProduct: Omit<Product, 'id'>) => {
      const response = await apiClient.post('/products', newProduct);
      return response.data;
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['products'] });
    },
  });
}
```

## Providers Setup

```typescript
// src/app/_layout.tsx
import { QueryClient, QueryClientProvider } from '@tanstack/react-query';
import { useEffect, useState } from 'react';
import { SafeAreaProvider } from 'react-native-safe-area-context';
import { useFonts } from 'expo-font';
import { SplashScreen, Stack } from 'expo-router';
import { StatusBar } from 'expo-status-bar';
import { ThemeProvider } from '../components/ui/theme-provider';

export {
  // Catch any errors thrown by the Layout component.
  ErrorBoundary,
} from 'expo-router';

// Prevent the splash screen from auto-hiding before asset loading is complete.
SplashScreen.preventAutoHideAsync();

export default function RootLayout() {
  const [queryClient] = useState(() => new QueryClient());
  const [loaded, error] = useFonts({
    'InterRegular': require('../../assets/fonts/Inter-Regular.ttf'),
    'InterBold': require('../../assets/fonts/Inter-Bold.ttf'),
  });

  // Expo Router uses Error Boundaries to catch errors in the navigation tree.
  useEffect(() => {
    if (error) throw error;
  }, [error]);

  useEffect(() => {
    if (loaded) {
      SplashScreen.hideAsync();
    }
  }, [loaded]);

  if (!loaded) {
    return null;
  }

  return (
    <QueryClientProvider client={queryClient}>
      <ThemeProvider>
        <SafeAreaProvider>
          <StatusBar style="auto" />
          <Stack screenOptions={{ headerShown: false }} />
        </SafeAreaProvider>
      </ThemeProvider>
    </QueryClientProvider>
  );
}
```

## Form Implementation with React Hook Form

```typescript
// src/components/feature/LoginForm.tsx
import { useState } from 'react';
import { View, Text, ActivityIndicator } from 'react-native';
import { useForm, Controller } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import { useAuthStore } from '../../lib/store/useAuthStore';
import { Button } from '../ui/button';
import { Input } from '../ui/input';

const loginSchema = z.object({
  email: z.string().email('Enter a valid email'),
  password: z.string().min(6, 'Password must be at least 6 characters'),
});

type LoginFormData = z.infer<typeof loginSchema>;

export function LoginForm() {
  const { login, isLoading, error } = useAuthStore();
  
  const { control, handleSubmit, formState: { errors } } = useForm<LoginFormData>({
    resolver: zodResolver(loginSchema),
    defaultValues: {
      email: '',
      password: '',
    },
  });
  
  const onSubmit = async (data: LoginFormData) => {
    await login(data.email, data.password);
  };
  
  return (
    <View className="w-full p-6">
      <Text className="text-2xl font-bold mb-6">Sign In</Text>
      
      {error && (
        <View className="bg-red-100 p-3 rounded-md mb-4">
          <Text className="text-red-800">{error}</Text>
        </View>
      )}
      
      <View className="space-y-4">
        <View>
          <Text className="mb-1 font-medium">Email</Text>
          <Controller
            control={control}
            name="email"
            render={({ field: { onChange, onBlur, value } }) => (
              <Input
                placeholder="Email"
                keyboardType="email-address"
                autoCapitalize="none"
                onBlur={onBlur}
                onChangeText={onChange}
                value={value}
                errorMessage={errors.email?.message}
              />
            )}
          />
          {errors.email && (
            <Text className="text-red-500 text-sm mt-1">{errors.email.message}</Text>
          )}
        </View>
        
        <View>
          <Text className="mb-1 font-medium">Password</Text>
          <Controller
            control={control}
            name="password"
            render={({ field: { onChange, onBlur, value } }) => (
              <Input
                placeholder="Password"
                secureTextEntry
                onBlur={onBlur}
                onChangeText={onChange}
                value={value}
                errorMessage={errors.password?.message}
              />
            )}
          />
          {errors.password && (
            <Text className="text-red-500 text-sm mt-1">{errors.password.message}</Text>
          )}
        </View>
        
        <Button 
          onPress={handleSubmit(onSubmit)}
          disabled={isLoading}
          className="mt-4"
        >
          {isLoading ? (
            <ActivityIndicator size="small" color="#fff" />
          ) : (
            'Sign In'
          )}
        </Button>
      </View>
    </View>
  );
}
```

## Navigation and Deep Linking

```typescript
// src/lib/utils/linking.ts
const linking = {
  prefixes: ['myapp://', 'https://myapp.com'],
  config: {
    screens: {
      '(tabs)': {
        screens: {
          home: 'home',
          profile: 'profile',
          settings: 'settings',
        },
      },
      'product/[id]': 'product/:id',
      'modals/settings': 'settings',
      '(auth)': {
        screens: {
          login: 'login',
          register: 'register',
          'forgot-password': 'forgot-password',
        },
      },
      notFound: '*',
    },
  },
};

export default linking;
```

## EAS Configuration

```json
// eas.json
{
  "cli": {
    "version": ">= 5.2.0"
  },
  "build": {
    "development": {
      "developmentClient": true,
      "distribution": "internal"
    },
    "preview": {
      "distribution": "internal"
    },
    "production": {}
  },
  "submit": {
    "production": {
      "ios": {
        "appleId": "your-apple-id@example.com",
        "ascAppId": "1234567890",
        "appleTeamId": "ABCDEF1234"
      },
      "android": {
        "serviceAccountKeyPath": "./path-to-key.json"
      }
    }
  }
}
```

## Best Practices

1. **Performance**
   - Use MMKV instead of AsyncStorage for performance
   - Implement proper list virtualization with FlashList
   - Use image caching with expo-image
   - Optimize renders with memo and useCallback
   - Use React Navigation's native stack for performance

2. **State Management**
   - Keep UI state in Zustand or Jotai
   - Use React Query for server state
   - Avoid excessive context providers
   - Implement proper loading and error states

3. **UI/UX Design**
   - Follow platform-specific design patterns
   - Use proper keyboard handling
   - Implement smooth animations with Reanimated
   - Support both light and dark modes
   - Make components accessible

4. **Testing**
   - Write unit tests for business logic
   - Test UI components with Testing Library
   - Implement E2E tests for critical flows
   - Test platform-specific behaviors

5. **Navigation**
   - Use typed routes with expo-router
   - Implement proper deep linking
   - Use route parameters for dynamic content
   - Handle authentication flows with protected routes

6. **Native Modules**
   - Use Expo modules when available
   - Consider development builds for custom native modules
   - Create platform-specific implementations when needed
   - Test thoroughly on both platforms