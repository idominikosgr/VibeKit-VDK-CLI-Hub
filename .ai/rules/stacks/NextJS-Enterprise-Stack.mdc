---
description: Best practices for building enterprise-grade applications with Next.js, TypeScript, Tailwind CSS, and Shadcn UI.
globs: ["**/*.{ts", "tsx}", "**/next.config.{js", "mjs", "ts}", "**/prisma/**"]
alwaysApply: false
version: "2.0.0"
lastUpdated: "2025-05-14"
compatibleWith: ["NextJS15","TypeScript-Modern","React19"]
---

# Next.js Enterprise Stack

## Stack Overview

### Core Technologies
- **Next.js 14+** with App Router (React Server Components)
- **React 19+** for component-based UI
- **TypeScript 5.4+** with strict mode enabled

### UI Layer
- **Tailwind CSS** for utility-first styling
- **Shadcn UI** for accessible, customizable components based on Radix UI
- **Lucide** for consistent iconography

### State Management
- **TanStack Query** (React Query) for server state
- **Zustand** for lightweight client state management

### Data Layer
- **Prisma ORM** for type-safe database access
- **PostgreSQL** via Neon or PlanetScale for scalable SQL database

### Authentication
- **Clerk** or **NextAuth/Auth.js** for authentication and user management

### Validation
- **Zod** for runtime validation and type inference

### Testing
- **Vitest** for unit and integration testing
- **React Testing Library** for component testing
- **Playwright** for end-to-end testing

### DevOps
- **Vercel** for hosting and deployment
- **GitHub Actions** for CI/CD pipelines

### Developer Experience
- **Prettier** for code formatting
- **ESLint** or **Biome** for code quality

## Project Structure

```
/
u251cu2500u2500 .github/             # GitHub Actions workflows
u251cu2500u2500 prisma/              # Prisma schema and migrations
u2502   u251cu2500u2500 schema.prisma
u2502   u2514u2500u2500 migrations/
u251cu2500u2500 src/
u2502   u251cu2500u2500 app/             # Next.js App Router pages
u2502   u2502   u251cu2500u2500 (auth)/      # Authentication routes (grouped)
u2502   u2502   u251cu2500u2500 (dashboard)/ # Dashboard routes (grouped)
u2502   u2502   u251cu2500u2500 api/         # API routes
u2502   u2502   u2514u2500u2500 layout.tsx   # Root layout with providers
u2502   u251cu2500u2500 components/      # React components
u2502   u2502   u251cu2500u2500 ui/          # Shadcn UI components
u2502   u2502   u251cu2500u2500 forms/        # Form components
u2502   u2502   u251cu2500u2500 layouts/      # Layout components
u2502   u2502   u2514u2500u2500 [feature]/   # Feature-specific components
u2502   u251cu2500u2500 lib/             # Shared utilities
u2502   u2502   u251cu2500u2500 db.ts        # Prisma client setup
u2502   u2502   u251cu2500u2500 utils.ts     # Utility functions
u2502   u2502   u2514u2500u2500 validations/ # Zod schemas
u2502   u251cu2500u2500 hooks/           # Custom React hooks
u2502   u2502   u251cu2500u2500 use-form.ts
u2502   u2502   u2514u2500u2500 use-[feature].ts
u2502   u251cu2500u2500 stores/          # Zustand stores
u2502   u251cu2500u2500 types/           # TypeScript type definitions
u2502   u2514u2500u2500 config/          # Application configuration
u251cu2500u2500 public/              # Static assets
u251cu2500u2500 tests/               # Test files
u2502   u251cu2500u2500 unit/
u2502   u2514u2500u2500 e2e/
u2514u2500u2500 package.json         # Project dependencies
```

## Prisma Setup and Database Access

### Prisma Schema

```prisma
// prisma/schema.prisma
generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "postgresqlExtensions"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  posts         Post[]
  accounts      Account[]
  sessions      Session[]

  @@index([email])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Post {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  published Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@index([authorId])
}

enum UserRole {
  USER
  ADMIN
}
```

### Prisma Client Setup

```typescript
// src/lib/db.ts
import { PrismaClient } from '@prisma/client'

const globalForPrisma = globalThis as unknown as { prisma: PrismaClient }

export const prisma =
  globalForPrisma.prisma ||
  new PrismaClient({
    log: process.env.NODE_ENV === 'development' ? ['query', 'error', 'warn'] : ['error'],
  })

if (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma
```

## Authentication Implementation

### Auth.js (NextAuth) Setup

```typescript
// src/app/api/auth/[...nextauth]/route.ts
import { compare } from 'bcryptjs'
import NextAuth, { type NextAuthOptions } from 'next-auth'
import CredentialsProvider from 'next-auth/providers/credentials'
import GithubProvider from 'next-auth/providers/github'
import GoogleProvider from 'next-auth/providers/google'
import { PrismaAdapter } from '@auth/prisma-adapter'

import { prisma } from '@/lib/db'

export const authOptions: NextAuthOptions = {
  adapter: PrismaAdapter(prisma),
  pages: {
    signIn: '/login',
    signOut: '/logout',
    error: '/auth/error',
  },
  session: {
    strategy: 'jwt',
  },
  providers: [
    GithubProvider({
      clientId: process.env.GITHUB_CLIENT_ID!,
      clientSecret: process.env.GITHUB_CLIENT_SECRET!,
    }),
    GoogleProvider({
      clientId: process.env.GOOGLE_CLIENT_ID!,
      clientSecret: process.env.GOOGLE_CLIENT_SECRET!,
    }),
    CredentialsProvider({
      name: 'Credentials',
      credentials: {
        email: { label: "Email", type: "email" },
        password: { label: "Password", type: "password" }
      },
      async authorize(credentials) {
        if (!credentials?.email || !credentials?.password) {
          return null
        }

        const user = await prisma.user.findUnique({
          where: {
            email: credentials.email
          }
        })

        if (!user || !user.password) {
          return null
        }

        const isPasswordValid = await compare(
          credentials.password,
          user.password
        )

        if (!isPasswordValid) {
          return null
        }

        return {
          id: user.id,
          email: user.email,
          name: user.name,
          role: user.role,
        }
      }
    })
  ],
  callbacks: {
    async session({ session, token }) {
      if (token.sub && session.user) {
        session.user.id = token.sub
      }

      if (token.role && session.user) {
        session.user.role = token.role as 'USER' | 'ADMIN'
      }

      return session
    },
    async jwt({ token, user }) {
      if (user) {
        token.role = user.role
      }

      return token
    }
  },
}

const handler = NextAuth(authOptions)

export { handler as GET, handler as POST }
```

### Auth Provider Setup

```typescript
// src/components/providers/auth-provider.tsx
"use client"

import { SessionProvider } from "next-auth/react"

export function AuthProvider({ children }: { children: React.ReactNode }) {
  return <SessionProvider>{children}</SessionProvider>
}
```

### Auth Middleware

```typescript
// src/middleware.ts
import { NextResponse } from 'next/server'
import { getToken } from 'next-auth/jwt'
import type { NextRequest } from 'next/server'

export async function middleware(request: NextRequest) {
  const token = await getToken({ req: request })
  const isAuthenticated = !!token

  // Protected routes check
  if (!isAuthenticated && request.nextUrl.pathname.startsWith('/dashboard')) {
    const redirectUrl = new URL('/login', request.url)
    redirectUrl.searchParams.set('callbackUrl', request.nextUrl.pathname)
    return NextResponse.redirect(redirectUrl)
  }

  // Redirect authenticated users away from auth pages
  if (isAuthenticated && (request.nextUrl.pathname.startsWith('/login') ||
                         request.nextUrl.pathname.startsWith('/register'))) {
    return NextResponse.redirect(new URL('/dashboard', request.url))
  }

  // Admin route protection
  if (request.nextUrl.pathname.startsWith('/admin') &&
      token?.role !== 'ADMIN') {
    return NextResponse.redirect(new URL('/unauthorized', request.url))
  }

  return NextResponse.next()
}

export const config = {
  matcher: [
    '/((?!api|_next/static|_next/image|images|favicon.ico).*)',
  ],
}
```

## Server-Side Data Fetching

### Data Fetching in Server Components

```typescript
// src/app/posts/page.tsx
import { Metadata } from 'next'

import { prisma } from '@/lib/db'
import { PostCard } from '@/components/posts/post-card'

export const metadata: Metadata = {
  title: 'Posts',
  description: 'View all blog posts',
}

export default async function PostsPage() {
  const posts = await prisma.post.findMany({
    where: {
      published: true,
    },
    include: {
      author: {
        select: {
          name: true,
          image: true,
        },
      },
    },
    orderBy: {
      createdAt: 'desc',
    },
  })

  return (
    <div className="container py-10">
      <h1 className="text-3xl font-bold mb-8">Blog Posts</h1>

      {posts.length === 0 ? (
        <p className="text-muted-foreground">No posts published yet.</p>
      ) : (
        <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
          {posts.map((post) => (
            <PostCard key={post.id} post={post} />
          ))}
        </div>
      )}
    </div>
  )
}
```

### API Routes for Client Actions

```typescript
// src/app/api/posts/route.ts
import { NextRequest, NextResponse } from 'next/server'
import { getServerSession } from 'next-auth/next'

import { prisma } from '@/lib/db'
import { authOptions } from '@/app/api/auth/[...nextauth]/route'
import { PostCreateSchema } from '@/lib/validations/post'

export async function POST(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions)

    if (!session?.user) {
      return NextResponse.json(
        { error: 'Unauthorized' },
        { status: 401 }
      )
    }

    const json = await request.json()
    const validatedData = PostCreateSchema.parse(json)

    const post = await prisma.post.create({
      data: {
        title: validatedData.title,
        content: validatedData.content,
        published: validatedData.published,
        authorId: session.user.id,
      },
    })

    return NextResponse.json(post, { status: 201 })
  } catch (error: any) {
    if (error.name === 'ZodError') {
      return NextResponse.json(
        { error: 'Invalid request data', details: error.format() },
        { status: 400 }
      )
    }

    console.error(error)
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    )
  }
}

export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url)
    const published = searchParams.get('published')
    const authorId = searchParams.get('authorId')

    const posts = await prisma.post.findMany({
      where: {
        ...(published !== null ? { published: published === 'true' } : {}),
        ...(authorId ? { authorId } : {}),
      },
      include: {
        author: {
          select: {
            name: true,
            image: true,
          },
        },
      },
      orderBy: {
        createdAt: 'desc',
      },
    })

    return NextResponse.json(posts)
  } catch (error) {
    console.error(error)
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    )
  }
}
```

## Client-Side Data Fetching with TanStack Query

```typescript
// src/hooks/use-posts.ts
import { useMutation, useQuery, useQueryClient } from '@tanstack/react-query'
import { toast } from "sonner"

import { type Post } from '@/types/post'

async function getPosts(published?: boolean) {
  const params = new URLSearchParams()
  if (published !== undefined) {
    params.set('published', String(published))
  }

  const response = await fetch(`/api/posts?${params.toString()}`)
  if (!response.ok) {
    throw new Error('Failed to fetch posts')
  }

  return response.json()
}

async function createPost(data: Pick<Post, 'title' | 'content' | 'published'>) {
  const response = await fetch('/api/posts', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify(data),
  })

  if (!response.ok) {
    const error = await response.json()
    throw new Error(error.error || 'Failed to create post')
  }

  return response.json()
}

export function usePosts(published?: boolean) {
  return useQuery({
    queryKey: ['posts', { published }],
    queryFn: () => getPosts(published),
  })
}

export function useCreatePost() {
  const queryClient = useQueryClient()

  return useMutation({
    mutationFn: createPost,
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['posts'] })
      toast.success('Post created successfully')
    },
    onError: (error: Error) => {
      toast.error(error.message)
    },
  })
}
```

## Forms with Zod Validation

```typescript
// src/components/posts/create-post-form.tsx
"use client"

import { zodResolver } from "@hookform/resolvers/zod"
import { useRouter } from "next/navigation"
import { useForm } from "react-hook-form"

import { Button } from "@/components/ui/button"
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form"
import { Input } from "@/components/ui/input"
import { Textarea } from "@/components/ui/textarea"
import { Checkbox } from "@/components/ui/checkbox"
import { useCreatePost } from "@/hooks/use-posts"
import { PostCreateSchema, type PostCreateInput } from "@/lib/validations/post"

export function CreatePostForm() {
  const router = useRouter()
  const { mutate: createPost, isPending } = useCreatePost()

  const form = useForm<PostCreateInput>({
    resolver: zodResolver(PostCreateSchema),
    defaultValues: {
      title: "",
      content: "",
      published: false,
    },
  })

  function onSubmit(values: PostCreateInput) {
    createPost(values, {
      onSuccess: () => {
        form.reset()
        router.push("/dashboard/posts")
      },
    })
  }

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-8">
        <FormField
          control={form.control}
          name="title"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Title</FormLabel>
              <FormControl>
                <Input
                  placeholder="Post title"
                  {...field}
                />
              </FormControl>
              <FormDescription>
                Choose a descriptive title for your post.
              </FormDescription>
              <FormMessage />
            </FormItem>
          )}
        />

        <FormField
          control={form.control}
          name="content"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Content</FormLabel>
              <FormControl>
                <Textarea
                  placeholder="Write your post content here..."
                  className="min-h-[200px]"
                  {...field}
                />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />

        <FormField
          control={form.control}
          name="published"
          render={({ field }) => (
            <FormItem className="flex flex-row items-start space-x-3 space-y-0 rounded-md border p-4">
              <FormControl>
                <Checkbox
                  checked={field.value}
                  onCheckedChange={field.onChange}
                />
              </FormControl>
              <div className="space-y-1 leading-none">
                <FormLabel>
                  Publish
                </FormLabel>
                <FormDescription>
                  When checked, your post will be visible to everyone.
                </FormDescription>
              </div>
            </FormItem>
          )}
        />

        <Button type="submit" disabled={isPending}>
          {isPending ? "Creating..." : "Create Post"}
        </Button>
      </form>
    </Form>
  )
}
```

### Schema Definition with Zod

```typescript
// src/lib/validations/post.ts
import { z } from "zod"

export const PostCreateSchema = z.object({
  title: z
    .string()
    .min(3, { message: "Title must be at least 3 characters" })
    .max(100, { message: "Title must be no more than 100 characters" }),
  content: z
    .string()
    .min(10, { message: "Content must be at least 10 characters" })
    .max(10000, { message: "Content must be no more than 10000 characters" }),
  published: z
    .boolean()
    .default(false),
})

export type PostCreateInput = z.infer<typeof PostCreateSchema>
```

## Client-Side State Management with Zustand

```typescript
// src/stores/theme-store.ts
import { create } from 'zustand'
import { persist } from 'zustand/middleware'

type ThemeState = {
  theme: 'light' | 'dark' | 'system'
  setTheme: (theme: 'light' | 'dark' | 'system') => void
}

export const useThemeStore = create<ThemeState>(
  persist(
    (set) => ({
      theme: 'system',
      setTheme: (theme) => set({ theme }),
    }),
    {
      name: 'theme-store',
    }
  )
)
```

## Best Practices

1. **Server-Side Rendering**:
   - Use React Server Components for static and dynamic content that doesn't require client interactivity
   - Apply "use client" directive only when necessary
   - Utilize Next.js streaming and suspense boundaries for optimal loading patterns

2. **Type Safety**:
   - Maintain consistent TypeScript usage with strict mode enabled
   - Use Zod schemas for runtime validation across client and server
   - Generate types from Prisma schema for database entities

3. **Authentication**:
   - Implement proper JWT handling with secure cookies
   - Apply route protection through middleware
   - Use role-based access control for admin functionality

4. **API Design**:
   - Use proper HTTP status codes and error handling
   - Implement consistent error response formats
   - Validate all input data before processing

5. **Performance**:
   - Optimize image loading with Next.js Image component
   - Implement proper data caching with TanStack Query
   - Use skeleton loaders for better user experience during data fetching

6. **Database Access**:
   - Use Prisma transactions for related operations
   - Apply proper indexing for frequently queried fields
   - Implement connection pooling for production

7. **Security**:
   - Protect against common web vulnerabilities (XSS, CSRF)
   - Hash passwords before storing in database
   - Implement rate limiting for auth routes

8. **Testing**:
   - Write unit tests for business logic
   - Use component testing for UI elements
   - Implement end-to-end tests for critical user flows

9. **Deployment**:
   - Use environment variables for configuration
   - Implement proper CI/CD pipelines
   - Apply database migrations safely