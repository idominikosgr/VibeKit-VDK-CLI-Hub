---
description: Best practices for building modern static and content-focused websites with Astro, React islands, and headless CMS integrations.
globs: ["**/*.{astro", "ts", "tsx", "js", "jsx", "md", "mdx}", "**/astro.config.{js", "mjs", "ts}"]
alwaysApply: false
version: "2.0.0"
lastUpdated: "2025-05-14"
compatibleWith: ["TypeScript-Modern","Astro4"]
---

# Modern Static/Content Stack with Astro

## Stack Overview

### Core Technologies
- **Astro** as the framework for content-focused websites
- **React** (or other frameworks) for interactive islands
- **TypeScript** for type safety

### Content Management
- **MDX** for rich content with components
- **Content Collections** for type-safe content
- **Headless CMS** integration (Sanity, Contentful, or Strapi)

### UI Layer
- **Tailwind CSS** for styling
- **Astro UI Components** for shared UI elements

### Deployment
- **Netlify** or **Cloudflare Pages** for hosting
- **Edge functions** for dynamic content

### Performance
- Heavy focus on Core Web Vitals optimization
- Minimal JavaScript shipped to client
- View Transitions API for smooth page transitions

## Project Structure

```
/
u251cu2500u2500 astro.config.mjs       # Astro configuration
u251cu2500u2500 tailwind.config.mjs    # Tailwind configuration
u251cu2500u2500 src/
u2502   u251cu2500u2500 components/       # UI components
u2502   u2502   u251cu2500u2500 astro/        # Astro components
u2502   u2502   u2514u2500u2500 react/        # React island components
u2502   u251cu2500u2500 content/          # Content collections
u2502   u2502   u251cu2500u2500 blog/         # Blog posts
u2502   u2502   u251cu2500u2500 authors/      # Author information
u2502   u2502   u2514u2500u2500 config.ts     # Content collection config
u2502   u251cu2500u2500 layouts/          # Page layouts
u2502   u251cu2500u2500 pages/            # Astro pages
u2502   u251cu2500u2500 styles/           # Global styles
u2502   u251cu2500u2500 lib/              # Shared utilities
u2502   u2514u2500u2500 assets/           # Static assets
u251cu2500u2500 public/               # Public static files
u2514u2500u2500 netlify/             # Netlify configuration
    u2514u2500u2500 functions/        # Netlify edge functions
```

## Astro Configuration

```typescript
// astro.config.mjs
import { defineConfig } from 'astro/config';
import tailwind from '@astrojs/tailwind';
import mdx from '@astrojs/mdx';
import react from '@astrojs/react';
import sitemap from '@astrojs/sitemap';
import { remarkReadingTime } from './src/lib/remark-reading-time.mjs';

export default defineConfig({
  site: 'https://example.com',
  integrations: [
    tailwind(),
    mdx({
      remarkPlugins: [remarkReadingTime],
      syntaxHighlight: 'shiki',
      shikiConfig: {
        theme: 'github-dark',
        wrap: true
      },
      gfm: true,
    }),
    react(),
    sitemap(),
  ],
  output: 'hybrid', // For mixed static/server rendering
  prefetch: {
    prefetchAll: true, // Enable prefetching for performance
  },
  vite: {
    ssr: {
      noExternal: ['@radix-ui/*']
    }
  }
});
```

## Content Collections Type-Safety

```typescript
// src/content/config.ts
import { defineCollection, reference, z } from 'astro:content';

const blog = defineCollection({
  type: 'content',
  schema: z.object({
    title: z.string(),
    description: z.string(),
    pubDate: z.date(),
    updatedDate: z.date().optional(),
    heroImage: z.string().optional(),
    categories: z.array(z.string()).default(['uncategorized']),
    author: reference('authors'),
    featured: z.boolean().default(false),
    draft: z.boolean().default(false),
  }),
});

const authors = defineCollection({
  type: 'data',
  schema: z.object({
    name: z.string(),
    avatar: z.string(),
    bio: z.string(),
    twitter: z.string().optional(),
    github: z.string().optional(),
  }),
});

export const collections = {
  blog,
  authors,
};
```

## MDX Blog Post Example

```markdown
---
title: "Using Astro Content Collections"
description: "Learn how to use Astro's built-in content collections for managing your blog posts."
pubDate: 2025-04-15
author: "john-doe"
featured: true
heroImage: "/images/blog/content-collections.jpg"
categories: ["astro", "content-management"]
---

import ProTip from "../../components/react/ProTip.tsx";

# Using Astro Content Collections

Astro's Content Collections provide a type-safe way to manage your content files.

## Benefits of Content Collections

- Type-safety with TypeScript
- Automatic validation of your frontmatter
- Easy querying and filtering

<ProTip client:visible>
  You can use components from any framework inside your MDX files when you need interactivity!
</ProTip>

```

## React Island Components

```tsx
// src/components/react/CommentSection.tsx
import { useState, useEffect } from 'react';

interface Comment {
  id: string;
  author: string;
  content: string;
  createdAt: string;
}

export default function CommentSection({ postId }: { postId: string }) {
  const [comments, setComments] = useState<Comment[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [newComment, setNewComment] = useState('');
  const [author, setAuthor] = useState('');

  useEffect(() => {
    const fetchComments = async () => {
      try {
        const response = await fetch(`/api/comments/${postId}`);
        const data = await response.json();
        setComments(data);
      } catch (error) {
        console.error('Error fetching comments:', error);
      } finally {
        setIsLoading(false);
      }
    };

    fetchComments();
  }, [postId]);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    if (!newComment.trim() || !author.trim()) return;

    try {
      const response = await fetch('/api/comments', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ postId, author, content: newComment }),
      });

      const newCommentData = await response.json();
      setComments([...comments, newCommentData]);
      setNewComment('');
    } catch (error) {
      console.error('Error posting comment:', error);
    }
  };

  return (
    <div className="mt-8 pt-8 border-t">
      <h2 className="text-2xl font-bold mb-4">Comments</h2>

      {isLoading ? (
        <p>Loading comments...</p>
      ) : comments.length === 0 ? (
        <p>No comments yet. Be the first to comment!</p>
      ) : (
        <div className="space-y-4 mb-8">
          {comments.map((comment) => (
            <div key={comment.id} className="p-4 bg-gray-50 rounded-lg dark:bg-gray-800">
              <div className="flex justify-between">
                <h3 className="font-medium">{comment.author}</h3>
                <span className="text-sm text-muted-foreground">
                  {new Date(comment.createdAt).toLocaleDateString()}
                </span>
              </div>
              <p className="mt-2">{comment.content}</p>
            </div>
          ))}
        </div>
      )}

      <form onSubmit={handleSubmit} className="space-y-4">
        <div>
          <label htmlFor="author" className="block mb-1 font-medium">Name</label>
          <input
            type="text"
            id="author"
            value={author}
            onChange={(e) => setAuthor(e.target.value)}
            className="w-full px-3 py-2 border rounded-md"
            required
          />
        </div>

        <div>
          <label htmlFor="comment" className="block mb-1 font-medium">Comment</label>
          <textarea
            id="comment"
            value={newComment}
            onChange={(e) => setNewComment(e.target.value)}
            className="w-full px-3 py-2 border rounded-md min-h-[100px]"
            required
          ></textarea>
        </div>

        <button
          type="submit"
          className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700"
        >
          Post Comment
        </button>
      </form>
    </div>
  );
}
```

## Dynamic Blog Post Listing with Pagination

```astro
---
// src/pages/blog/[...page].astro
import { getCollection } from 'astro:content';
import type { GetStaticPathsOptions, Page } from 'astro';
import type { CollectionEntry } from 'astro:content';
import Layout from '../../layouts/BlogLayout.astro';
import BlogCard from '../../components/astro/BlogCard.astro';
import Pagination from '../../components/astro/Pagination.astro';

export async function getStaticPaths({ paginate }: GetStaticPathsOptions) {
  const blogPosts = await getCollection('blog', ({ data }) => {
    return import.meta.env.PROD ? !data.draft : true;
  });

  // Sort posts by date
  const sortedPosts = blogPosts.sort(
    (a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf()
  );

  // Generate pages with 9 posts per page
  return paginate(sortedPosts, { pageSize: 9 });
}

type Props = {
  page: Page<CollectionEntry<'blog'>>;
};

const { page } = Astro.props;
---

<Layout title="Blog">
  <div class="container mx-auto px-4 py-12">
    <h1 class="text-4xl font-bold mb-8">Blog</h1>

    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
      {page.data.map((post) => (
        <BlogCard post={post} />
      ))}
    </div>

    <Pagination page={page} />
  </div>
</Layout>
```

## Astro Components with React Islands

```astro
---
// src/pages/blog/[...slug].astro
import { getCollection, getEntry } from 'astro:content';
import Layout from '../../layouts/BlogLayout.astro';
import FormattedDate from '../../components/astro/FormattedDate.astro';
import TableOfContents from '../../components/astro/TableOfContents.astro';
import CommentSection from '../../components/react/CommentSection';
import ShareButtons from '../../components/react/ShareButtons';

export async function getStaticPaths() {
  const posts = await getCollection('blog');

  return posts.map((post) => ({
    params: { slug: post.slug },
    props: { post },
  }));
}

const { post } = Astro.props;
const { Content, headings } = await post.render();

const author = await getEntry(post.data.author);
---

<Layout
  title={post.data.title}
  description={post.data.description}
  image={post.data.heroImage}
>
  <article class="container mx-auto px-4 py-12 max-w-4xl">
    <div class="mb-8">
      {post.data.heroImage && (
        <img
          src={post.data.heroImage}
          alt={post.data.title}
          class="w-full h-[400px] object-cover rounded-xl mb-6"
        />
      )}

      <h1 class="text-4xl font-bold mb-4">{post.data.title}</h1>

      <div class="flex items-center justify-between mb-8">
        <div class="flex items-center">
          <img
            src={author.data.avatar}
            alt={author.data.name}
            class="w-10 h-10 rounded-full mr-3"
          />
          <div>
            <p class="font-medium">{author.data.name}</p>
            <p class="text-sm text-muted-foreground">
              <FormattedDate date={post.data.pubDate} />
            </p>
          </div>
        </div>

        <ShareButtons client:visible url={Astro.url} title={post.data.title} />
      </div>
    </div>

    <div class="flex flex-col md:flex-row gap-8">
      <aside class="md:w-1/4 hidden md:block sticky top-20 self-start">
        <TableOfContents headings={headings} />
      </aside>

      <div class="md:w-3/4">
        <div class="prose prose-lg max-w-none dark:prose-invert">
          <Content />
        </div>

        <CommentSection client:visible postId={post.slug} />
      </div>
    </div>
  </article>
</Layout>
```

## Headless CMS Integration (Sanity.io)

```typescript
// src/lib/sanity.ts
import { createClient } from '@sanity/client';
import imageUrlBuilder from '@sanity/image-url';
import type { SanityImageSource } from '@sanity/image-url/lib/types/types';

export const client = createClient({
  projectId: import.meta.env.PUBLIC_SANITY_PROJECT_ID,
  dataset: import.meta.env.PUBLIC_SANITY_DATASET,
  apiVersion: '2023-05-03',
  useCdn: true,
});

const builder = imageUrlBuilder(client);

export function urlFor(source: SanityImageSource) {
  return builder.image(source);
}

export async function getFeaturedProjects() {
  return await client.fetch(
    `*[_type == "project" && featured == true] | order(publishedAt desc) {
      _id,
      title,
      slug,
      excerpt,
      mainImage,
      categories[]->{title},
      publishedAt
    }`
  );
}
```

## API Route with Edge Functions (Netlify)

```typescript
// netlify/functions/comments.ts
import { Context } from '@netlify/edge-functions';
import { createClient } from '@supabase/supabase-js';

export default async (req: Request, context: Context) => {
  const supabase = createClient(
    context.env.SUPABASE_URL,
    context.env.SUPABASE_SERVICE_KEY
  );

  // Handle GET request to fetch comments for a post
  if (req.method === 'GET') {
    const url = new URL(req.url);
    const pathParts = url.pathname.split('/');
    const postId = pathParts[pathParts.length - 1];

    const { data, error } = await supabase
      .from('comments')
      .select('*')
      .eq('post_id', postId)
      .order('created_at', { ascending: true });

    if (error) {
      return new Response(JSON.stringify({ error: error.message }), {
        status: 500,
        headers: {
          'Content-Type': 'application/json'
        }
      });
    }

    return new Response(JSON.stringify(data), {
      headers: {
        'Content-Type': 'application/json'
      }
    });
  }

  // Handle POST request to create a new comment
  if (req.method === 'POST') {
    const body = await req.json();
    const { postId, author, content } = body;

    if (!postId || !author || !content) {
      return new Response(JSON.stringify({ error: 'Missing required fields' }), {
        status: 400,
        headers: {
          'Content-Type': 'application/json'
        }
      });
    }

    const { data, error } = await supabase
      .from('comments')
      .insert([{
        post_id: postId,
        author,
        content,
      }])
      .select();

    if (error) {
      return new Response(JSON.stringify({ error: error.message }), {
        status: 500,
        headers: {
          'Content-Type': 'application/json'
        }
      });
    }

    return new Response(JSON.stringify(data[0]), {
      status: 201,
      headers: {
        'Content-Type': 'application/json'
      }
    });
  }

  // Handle unsupported methods
  return new Response(JSON.stringify({ error: 'Method not allowed' }), {
    status: 405,
    headers: {
      'Content-Type': 'application/json',
      'Allow': 'GET, POST'
    }
  });
};
```

## View Transitions for Page Transitions

```astro
---
// src/layouts/BaseLayout.astro
import { ViewTransitions } from 'astro:transitions';
import Header from '../components/astro/Header.astro';
import Footer from '../components/astro/Footer.astro';
import '../styles/global.css';

interface Props {
  title: string;
  description?: string;
  image?: string;
}

const {
  title,
  description = 'A modern content-focused website built with Astro',
  image = '/images/social-card.jpg'
} = Astro.props;

const canonicalURL = new URL(Astro.url.pathname, Astro.site);
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link rel="canonical" href={canonicalURL} />
    <meta name="generator" content={Astro.generator} />

    <!-- Primary Meta Tags -->
    <title>{title}</title>
    <meta name="title" content={title} />
    <meta name="description" content={description} />

    <!-- Open Graph / Facebook -->
    <meta property="og:type" content="website" />
    <meta property="og:url" content={Astro.url} />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content={new URL(image, Astro.url)} />

    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content={Astro.url} />
    <meta property="twitter:title" content={title} />
    <meta property="twitter:description" content={description} />
    <meta property="twitter:image" content={new URL(image, Astro.url)} />

    <!-- Favicon -->
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />

    <!-- View Transitions for page transitions -->
    <ViewTransitions />
  </head>
  <body class="min-h-screen flex flex-col">
    <Header transition:animate="morph" />

    <main class="flex-1" transition:animate="slide">
      <slot />
    </main>

    <Footer transition:animate="morph" />
  </body>
</html>
```

## Best Practices

1. **Performance Optimization**
   - Use static rendering when possible
   - Implement image optimization
   - Load JS only when needed with client directives
   - Use eager/lazy loading appropriately
   - Implement proper caching strategies

2. **Content Management**
   - Organize content collections by type
   - Use proper schemas for validation
   - Implement consistent frontmatter patterns
   - Support both local content and headless CMS

3. **React Islands**
   - Use islands for interactive components only
   - Implement proper hydration strategies
   - Apply client directives appropriately (client:load, client:visible, etc.)
   - Keep islands small and focused

4. **SEO**
   - Implement proper meta tags
   - Generate sitemaps and robots.txt
   - Use semantic HTML
   - Optimize for Core Web Vitals

5. **Accessibility**
   - Implement proper heading structure
   - Use semantic HTML elements
   - Ensure keyboard navigation works
   - Test with screen readers
   - Maintain sufficient color contrast

6. **Deployment**
   - Use environment variables for configuration
   - Implement proper build steps
   - Use adapter for deployment target
   - Implement proper CI/CD pipelines