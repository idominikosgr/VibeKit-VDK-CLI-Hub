---
description: Best practices for integrating and customizing Shadcn UI in modern React applications with a focus on Next.js, TypeScript, and Tailwind CSS.
globs: ["**/*.{ts", "tsx}", "**/tailwind.config.{js", "ts}", "**/components.json"]
alwaysApply: false
version: "2.0.0"
lastUpdated: "2025-05-14"
compatibleWith: ["Memory-MCP","Sequential-Thinking-Advanced"]
---

# Shadcn UI Integration Best Practices

## Core Principles

- Use Shadcn UI as a component collection, not a component library
- Understand that Shadcn UI components live in your codebase and can be customized
- Maintain consistency in component usage and styling
- Implement proper accessibility patterns
- Extend components thoughtfully without breaking core functionality
- Follow a component-first approach to UI development

## Installation and Setup

- Install Shadcn UI CLI as a dev dependency:
  ```bash
  npm install -D @shadcn/ui
  ```

- Initialize Shadcn UI in your project:
  ```bash
  npx shadcn-ui@latest init
  ```

- Configure components.json properly:
  ```json
  {
    "$schema": "https://ui.shadcn.com/schema.json",
    "style": "default",
    "rsc": true,
    "tsx": true,
    "tailwind": {
      "config": "tailwind.config.ts",
      "css": "src/app/globals.css",
      "baseColor": "slate",
      "cssVariables": true
    },
    "aliases": {
      "components": "@/components",
      "utils": "@/lib/utils"
    }
  }
  ```

- Set up Tailwind CSS with the required plugins:
  ```typescript
  // tailwind.config.ts
  import type { Config } from "tailwindcss";
  import { fontFamily } from "tailwindcss/defaultTheme";
  
  const config: Config = {
    darkMode: ["class"],
    content: [
      "./src/pages/**/*.{js,ts,jsx,tsx,mdx}",
      "./src/components/**/*.{js,ts,jsx,tsx,mdx}",
      "./src/app/**/*.{js,ts,jsx,tsx,mdx}",
    ],
    theme: {
      container: {
        center: true,
        padding: "2rem",
        screens: {
          "2xl": "1400px",
        },
      },
      extend: {
        colors: {
          border: "hsl(var(--border))",
          input: "hsl(var(--input))",
          ring: "hsl(var(--ring))",
          background: "hsl(var(--background))",
          foreground: "hsl(var(--foreground))",
          primary: {
            DEFAULT: "hsl(var(--primary))",
            foreground: "hsl(var(--primary-foreground))",
          },
          secondary: {
            DEFAULT: "hsl(var(--secondary))",
            foreground: "hsl(var(--secondary-foreground))",
          },
          destructive: {
            DEFAULT: "hsl(var(--destructive))",
            foreground: "hsl(var(--destructive-foreground))",
          },
          muted: {
            DEFAULT: "hsl(var(--muted))",
            foreground: "hsl(var(--muted-foreground))",
          },
          accent: {
            DEFAULT: "hsl(var(--accent))",
            foreground: "hsl(var(--accent-foreground))",
          },
          popover: {
            DEFAULT: "hsl(var(--popover))",
            foreground: "hsl(var(--popover-foreground))",
          },
          card: {
            DEFAULT: "hsl(var(--card))",
            foreground: "hsl(var(--card-foreground))",
          },
        },
        borderRadius: {
          lg: "var(--radius)",
          md: "calc(var(--radius) - 2px)",
          sm: "calc(var(--radius) - 4px)",
        },
        fontFamily: {
          sans: ["var(--font-sans)", ...fontFamily.sans],
        },
        keyframes: {
          "accordion-down": {
            from: { height: "0" },
            to: { height: "var(--radix-accordion-content-height)" },
          },
          "accordion-up": {
            from: { height: "var(--radix-accordion-content-height)" },
            to: { height: "0" },
          },
        },
        animation: {
          "accordion-down": "accordion-down 0.2s ease-out",
          "accordion-up": "accordion-up 0.2s ease-out",
        },
      },
    },
    plugins: [
      require("tailwindcss-animate"),
      require("@tailwindcss/typography"),
    ],
  };
  
  export default config;
  ```

## Component Organization

- Organize Shadcn UI components in your project:
  ```
  /src/components
  u251cu2500u2500 /ui (shadcn components)
  u2502   u251cu2500u2500 button.tsx
  u2502   u251cu2500u2500 card.tsx
  u2502   u251cu2500u2500 input.tsx
  u2502   u251cu2500u2500 ...
  u251cu2500u2500 /composite (your custom components using shadcn components)
  u2502   u251cu2500u2500 user-card.tsx
  u2502   u251cu2500u2500 search-bar.tsx
  u2502   u251cu2500u2500 ...
  u251cu2500u2500 /layout
  u2502   u251cu2500u2500 header.tsx
  u2502   u251cu2500u2500 footer.tsx
  u2502   u251cu2500u2500 ...
  u251cu2500u2500 /forms
  u2502   u251cu2500u2500 login-form.tsx
  u2502   u251cu2500u2500 signup-form.tsx
  u2502   u251cu2500u2500 ...
  ```

- Keep component organization flat; avoid deep nesting
- Use barrel files (index.ts) for easier imports:
  ```typescript
  // src/components/ui/index.ts
  export * from "./button";
  export * from "./card";
  export * from "./input";
  // ...
  ```

## Adding Components

- Add components via CLI as needed:
  ```bash
  npx shadcn-ui@latest add button
  npx shadcn-ui@latest add card
  npx shadcn-ui@latest add dialog
  ```

- Only add components you need to avoid bloating your codebase
- Consider component dependencies (some components require others)

## Customization Best Practices

- Use CSS variables for theme customization in globals.css:
  ```css
  @layer base {
    :root {
      --background: 0 0% 100%;
      --foreground: 222.2 84% 4.9%;
      
      --card: 0 0% 100%;
      --card-foreground: 222.2 84% 4.9%;
      
      --popover: 0 0% 100%;
      --popover-foreground: 222.2 84% 4.9%;
      
      --primary: 222.2 47.4% 11.2%;
      --primary-foreground: 210 40% 98%;
      
      --secondary: 210 40% 96.1%;
      --secondary-foreground: 222.2 47.4% 11.2%;
      
      --muted: 210 40% 96.1%;
      --muted-foreground: 215.4 16.3% 46.9%;
      
      --accent: 210 40% 96.1%;
      --accent-foreground: 222.2 47.4% 11.2%;
      
      --destructive: 0 84.2% 60.2%;
      --destructive-foreground: 210 40% 98%;
      
      --border: 214.3 31.8% 91.4%;
      --input: 214.3 31.8% 91.4%;
      --ring: 222.2 84% 4.9%;
      
      --radius: 0.5rem;
    }
    
    .dark {
      --background: 222.2 84% 4.9%;
      --foreground: 210 40% 98%;
      
      --card: 222.2 84% 4.9%;
      --card-foreground: 210 40% 98%;
      
      --popover: 222.2 84% 4.9%;
      --popover-foreground: 210 40% 98%;
      
      --primary: 210 40% 98%;
      --primary-foreground: 222.2 47.4% 11.2%;
      
      --secondary: 217.2 32.6% 17.5%;
      --secondary-foreground: 210 40% 98%;
      
      --muted: 217.2 32.6% 17.5%;
      --muted-foreground: 215 20.2% 65.1%;
      
      --accent: 217.2 32.6% 17.5%;
      --accent-foreground: 210 40% 98%;
      
      --destructive: 0 62.8% 30.6%;
      --destructive-foreground: 210 40% 98%;
      
      --border: 217.2 32.6% 17.5%;
      --input: 217.2 32.6% 17.5%;
      --ring: 212.7 26.8% 83.9%;
    }
  }
  ```

- Modify component variants in component files:
  ```typescript
  // src/components/ui/button.tsx
  export const buttonVariants = cva(
    "inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50",
    {
      variants: {
        variant: {
          default: "bg-primary text-primary-foreground shadow hover:bg-primary/90",
          destructive: "bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90",
          outline: "border border-input bg-transparent shadow-sm hover:bg-accent hover:text-accent-foreground",
          secondary: "bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80",
          ghost: "hover:bg-accent hover:text-accent-foreground",
          link: "text-primary underline-offset-4 hover:underline",
          // Custom variant
          success: "bg-green-500 text-white shadow hover:bg-green-600",
        },
        size: {
          default: "h-9 px-4 py-2",
          sm: "h-8 rounded-md px-3 text-xs",
          lg: "h-10 rounded-md px-8",
          icon: "h-9 w-9",
        },
      },
      defaultVariants: {
        variant: "default",
        size: "default",
      },
    }
  )
  ```

- Extend with additional classes using className prop:
  ```tsx
  <Button className="font-bold tracking-wide">
    Custom Styled Button
  </Button>
  ```

- Use Tailwind's extend feature for custom project colors

## Dark Mode Implementation

- Use Shadcn UI's `ThemeProvider` and `ThemeToggle` components
- Implement proper theme switching logic:
  ```tsx
  // src/components/theme-provider.tsx
  "use client"
  
  import * as React from "react"
  import { ThemeProvider as NextThemesProvider } from "next-themes"
  import { type ThemeProviderProps } from "next-themes/dist/types"
  
  export function ThemeProvider({ children, ...props }: ThemeProviderProps) {
    return <NextThemesProvider {...props}>{children}</NextThemesProvider>
  }
  ```

- Include theme provider in your layout:
  ```tsx
  // src/app/layout.tsx
  import { ThemeProvider } from "@/components/theme-provider"
  
  export default function RootLayout({ children }: RootLayoutProps) {
    return (
      <html lang="en" suppressHydrationWarning>
        <body>
          <ThemeProvider 
            attribute="class" 
            defaultTheme="system" 
            enableSystem 
            disableTransitionOnChange
          >
            {children}
          </ThemeProvider>
        </body>
      </html>
    )
  }
  ```

- Create a theme toggle component:
  ```tsx
  // src/components/theme-toggle.tsx
  "use client"
  
  import { useTheme } from "next-themes"
  import { Button } from "@/components/ui/button"
  import { Moon, Sun } from "lucide-react"
  
  export function ThemeToggle() {
    const { theme, setTheme } = useTheme()
    
    return (
      <Button
        variant="ghost"
        size="icon"
        onClick={() => setTheme(theme === "light" ? "dark" : "light")}
      >
        <Sun className="h-5 w-5 rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0" />
        <Moon className="absolute h-5 w-5 rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100" />
        <span className="sr-only">Toggle theme</span>
      </Button>
    )
  }
  ```

## Form Integration

- Use React Hook Form with Shadcn UI form components
- Add Zod for form validation
- Implement proper form structure using Shadcn UI components:
  ```tsx
  "use client"
  
  import { zodResolver } from "@hookform/resolvers/zod"
  import { useForm } from "react-hook-form"
  import * as z from "zod"
  
  import { Button } from "@/components/ui/button"
  import {
    Form,
    FormControl,
    FormDescription,
    FormField,
    FormItem,
    FormLabel,
    FormMessage,
  } from "@/components/ui/form"
  import { Input } from "@/components/ui/input"
  
  const formSchema = z.object({
    username: z.string().min(2).max(50),
    email: z.string().email(),
    password: z.string().min(8),
  })
  
  export function SignupForm() {
    const form = useForm<z.infer<typeof formSchema>>({  
      resolver: zodResolver(formSchema),
      defaultValues: {
        username: "",
        email: "",
        password: "",
      },
    })
    
    function onSubmit(values: z.infer<typeof formSchema>) {
      // Handle form submission
      console.log(values)
    }
    
    return (
      <Form {...form}>
        <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-8">
          <FormField
            control={form.control}
            name="username"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Username</FormLabel>
                <FormControl>
                  <Input placeholder="username" {...field} />
                </FormControl>
                <FormDescription>
                  Your public display name.
                </FormDescription>
                <FormMessage />
              </FormItem>
            )}
          />
          
          <FormField
            control={form.control}
            name="email"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Email</FormLabel>
                <FormControl>
                  <Input placeholder="email@example.com" {...field} />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
          
          <FormField
            control={form.control}
            name="password"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Password</FormLabel>
                <FormControl>
                  <Input type="password" placeholder="********" {...field} />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
          
          <Button type="submit">Submit</Button>
        </form>
      </Form>
    )
  }
  ```

## Accessibility Best Practices

- Leverage Shadcn UI's built-in accessibility features
- Always include proper aria attributes where needed
- Use semantic HTML elements
- Ensure proper keyboard navigation
- Maintain sufficient color contrast
- Test with screen readers
- Include descriptive labels for form fields

## Composition Patterns

- Create composite components using Shadcn UI primitives
- Use the `Slot` pattern for flexible component composition
- Create higher-order components for complex UI patterns
- Use render props pattern when appropriate
- Avoid excessive props for customization; use composition instead

## Animation Integration

- Use Framer Motion for advanced animations:
  ```tsx
  import { motion } from "framer-motion"
  import { Button } from "@/components/ui/button"
  
  export function AnimatedButton({ children, ...props }) {
    return (
      <motion.div
        whileHover={{ scale: 1.05 }}
        whileTap={{ scale: 0.95 }}
      >
        <Button {...props}>{children}</Button>
      </motion.div>
    )
  }
  ```

- Use Tailwind's built-in animation classes for simple animations
- Add custom animation keyframes in tailwind.config.ts
- Implement proper motion-safe animations

## Icon Integration

- Use Lucide React for icons:
  ```tsx
  import { Search, User, Settings } from "lucide-react"
  import { Button } from "@/components/ui/button"
  
  export function IconButtons() {
    return (
      <div className="flex gap-2">
        <Button size="icon" variant="ghost">
          <Search className="h-4 w-4" />
        </Button>
        <Button size="icon" variant="ghost">
          <User className="h-4 w-4" />
        </Button>
        <Button size="icon" variant="ghost">
          <Settings className="h-4 w-4" />
        </Button>
      </div>
    )
  }
  ```

- Maintain consistent icon sizes
- Use aria-label for icon-only buttons
- Consider lazy loading for large icon sets

## Performance Optimization

- Only import the components you need
- Use dynamic imports for modals and other large components
- Implement proper code splitting
- Use proper dependencies in useEffect to prevent unnecessary re-renders
- Consider server components for static parts of the UI

## Common Pitfalls to Avoid

- Overriding styles in a way that breaks component functionality
- Adding too many custom variants that reduce consistency
- Not maintaining proper typings when extending components
- Ignoring accessibility features
- Implementing complex state logic in UI components
- Duplicating component logic instead of composing

## Advanced Customization

- Create a custom variant plugin for consistent extensions:
  ```typescript
  // lib/utils.ts
  import { type ClassValue, clsx } from "clsx"
  import { twMerge } from "tailwind-merge"
  
  export function cn(...inputs: ClassValue[]) {
    return twMerge(clsx(inputs))
  }
  
  // Create a custom variant generator
  export function createVariants(baseClasses: string, variants: Record<string, Record<string, string>>) {
    return cva(baseClasses, { variants })
  }
  ```

- Use component composition for complex UI patterns
- Create component wrappers for project-specific functionality
- Implement a design system token approach for consistency