---
description: Best practices for managing AI memories across development sessions, capturing key milestones, and maintaining project context.
globs: ["**/*.py", "**/*.js", "**/*.ts", "**/*.md"]
alwaysApply: true
version: "1.0.0"
lastUpdated: "2025-05-14"
compatibleWith: ["Memory-MCP", "Sequential-Thinking-Advanced", "AI-Workflow-Integration"]
---

# Memory Management Best Practices

## Memory Types and Purposes
- Implement a structured approach to memory creation based on specific purposes:
  1. **Project Context**: Fundamental information about the project structure, architecture, and conventions
     ```
     Title: Project Architecture Overview
     Tags: [project_structure, architecture, context]
     Content: This project follows a microservices architecture with services written in TypeScript.
     The frontend uses React with Next.js, and services communicate via gRPC and REST endpoints.
     ```
  2. **Technical Decisions**: Important choices and their rationales
     ```
     Title: Database Selection Decision
     Tags: [technical_decision, database, rationale]
     Content: Selected PostgreSQL for primary storage due to: 1) Need for relational data modeling,
     2) Complex query requirements, 3) Team expertise. Considered MongoDB but ruled out due to data consistency requirements.
     ```
  3. **Development Progress**: Key milestones and achievements
     ```
     Title: Authentication System Implementation Complete
     Tags: [milestone, authentication, completed_feature]
     Content: Completed the OAuth2 authentication system with social login providers (Google, GitHub) and RBAC.
     System includes JWTs with refresh tokens and secure cookie handling.
     ```
  4. **Known Issues**: Bugs, limitations, or technical debt items
     ```
     Title: Performance Issue in User Search
     Tags: [known_issue, performance, search, technical_debt]
     Content: User search functionality exhibits slow performance with large datasets (>10k users).
     Current implementation does a full table scan. Needs indexing and query optimization.
     ```
  5. **Session Handoff**: End-of-session summaries for continuity
     ```
     Title: Session Handoff - 2025-05-14
     Tags: [session_handoff, context]
     Content: In this session we: 1) Enhanced Swift and SwiftUI rule files with modern patterns, 
     2) Added PySide6 asyncio integration, 3) Created new technology files for GraphQL, Docker/Kubernetes, 
     Tauri, and SwiftData. Next session will focus on creating an interactive setup wizard and adding version indicators.
     ```

## Memory Creation Guidelines
- Create memories proactively at key moments:
  - When important decisions are made
  - When significant milestones are reached
  - When architectural patterns are established
  - When discovering important project context
  - At the end of development sessions
  - When identifying technical debt or future work
- Structure memory content effectively:
  - Use clear, descriptive titles that identify the content
  - Begin with a high-level summary sentence
  - Use bullet points or numbered lists for multiple items
  - Include specific details (names, paths, versions, dates)
  - Reference related memories where appropriate
  - Include sufficient context for future understanding
- Implement consistent tagging for effective retrieval:
  - Use `snake_case` for all tags
  - Include category tags (e.g., `technical_decision`, `milestone`, `known_issue`)
  - Add domain-specific tags (e.g., `authentication`, `database`, `ui`)
  - Include status tags where relevant (e.g., `completed`, `in_progress`, `blocked`)
  - Consider priority tags for important items (e.g., `critical`, `high_priority`)

## Session Handoff Process
- Create a comprehensive handoff memory at the end of each significant session:
  ```typescript
  await createMemory({
    title: `Session Handoff - ${getCurrentDate()}`,
    content: `
    # Session Summary
    ${sessionSummary}
    
    ## Key Accomplishments
    ${bulletedList(accomplishments)}
    
    ## Decisions Made
    ${bulletedList(decisions)}
    
    ## Current Status
    ${currentStatus}
    
    ## Next Steps
    ${bulletedList(nextSteps)}
    `,
    tags: ["session_handoff", "context", ...relevantTags],
    userTriggered: true  // Make user aware of handoff creation
  });
  ```
- Include these essential elements in handoff memories:
  1. **Session Summary**: Brief overview of the session focus and outcomes
  2. **Key Accomplishments**: Specific tasks completed or milestones reached
  3. **Decisions Made**: Important decisions and their rationales
  4. **Current Status**: Where things stand at the end of the session
  5. **Next Steps**: Clear guidance on what should happen next
  6. **Open Questions**: Any unresolved issues that need addressing
  7. **Resources**: Relevant links, documents, or references
- Create handoffs at appropriate granularity:
  - Daily handoffs for intensive development periods
  - Task-completion handoffs for significant features
  - Milestone handoffs at project stage boundaries
  - Issue-resolution handoffs after solving complex problems

## Memory Retrieval Patterns
- Implement effective search strategies for memory retrieval:
  ```typescript
  // At the start of a new session, retrieve the most recent handoff
  const recentHandoffs = await searchMemory("session_handoff");
  const mostRecentHandoff = recentHandoffs.sort((a, b) => 
    new Date(b.title.split(' - ')[1]) - new Date(a.title.split(' - ')[1]))[0];
  ```
- Retrieve context-specific memories based on the current task:
  ```typescript
  // When working on authentication
  const authMemories = await searchMemory("authentication");
  
  // When making database decisions
  const dbDecisions = await searchMemory("database technical_decision");
  ```
- Periodically review and refresh memory of key project aspects:
  ```typescript
  // Refresh project context understanding
  const projectContext = await searchMemory("project_structure architecture");
  ```
- Combine memory types for comprehensive understanding:
  ```typescript
  // Understanding a component's full context
  const componentMemories = await searchMemory("user_interface");
  const decisions = componentMemories.filter(m => m.tags.includes("technical_decision"));
  const issues = componentMemories.filter(m => m.tags.includes("known_issue"));
  const progress = componentMemories.filter(m => m.tags.includes("milestone"));
  ```

## Memory Maintenance
- Periodically review and update memories to ensure accuracy:
  ```typescript
  // Update a memory with new information
  await updateMemory({
    id: existingMemory.id,
    title: existingMemory.title,
    content: `${existingMemory.content}\n\nUpdate (${getCurrentDate()}): ${newInformation}`
  });
  ```
- Consolidate related memories when they become fragmented:
  ```typescript
  // Combine multiple related memories into a comprehensive one
  await createMemory({
    title: "Comprehensive Authentication System Overview",
    content: `
    # Authentication System Overview
    
    ## Architecture
    ${authArchitectureMemory.content}
    
    ## Implementation Details
    ${authImplementationMemory.content}
    
    ## Known Issues
    ${authIssuesMemory.content}
    `,
    tags: ["authentication", "comprehensive", "technical_overview"],
    userTriggered: false
  });
  
  // Optionally delete or mark the original memories as consolidated
  ```
- Remove outdated or incorrect memories:
  ```typescript
  // Delete a memory that's no longer relevant
  await deleteMemory({
    id: outdatedMemory.id
  });
  ```
- Implement regular memory audit processes to maintain quality and relevance.

## Knowledge Graph Integration
- Use the knowledge graph to model complex relationships between project elements:
  ```typescript
  // Creating entities for system components
  await createEntities([
    {
      name: "AuthService",
      entityType: "Service",
      observations: ["Handles user authentication", "Implements OAuth flows", "Issues JWTs"]
    },
    {
      name: "UserProfile",
      entityType: "Component",
      observations: ["Frontend component", "Displays user information", "Allows profile editing"]
    }
  ]);
  
  // Creating relationships between components
  await createRelations([
    {
      from: "UserProfile",
      to: "AuthService",
      relationType: "consumes"
    }
  ]);
  ```
- Visualize system architecture through graph relationships.
- Query the knowledge graph to understand component dependencies and interactions.
- Update the knowledge graph as the system evolves.

## Best Practices for AI Assistants
- Proactively create memories without prompting when encountering important information.
- Reference relevant memories when making suggestions or recommendations.
- Update memories as new information becomes available.
- Suggest memory creation to users at appropriate moments.
- Use memories to maintain consistency in recommendations and solutions.
- Prioritize recency and relevance when retrieving memories for context.
- Adapt to the user's memory management style and preferences.
