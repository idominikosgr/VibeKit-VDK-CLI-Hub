---
description: SwiftUI best practices for building modern declarative user interfaces across Apple platforms.
globs: ["**/*.swift"]
alwaysApply: false
version: "2.0.0"
lastUpdated: "2025-05-14"
compatibleWith: ["Swift", "SwiftData", "Combine"]
---

# SwiftUI Best Practices

## View Architecture & Component Design
- Follow the declarative programming model, describing the UI state rather than the process of creating it.
- Keep views simple and focused on a single purpose; extract complex subviews into separate components.
- Limit view files to under 300 lines of code for maintainability.
- Use the `ViewBuilder` pattern for creating complex view hierarchies.
- Extract repeated view patterns into reusable components.
- Follow a consistent naming convention for views, such as `ContentView`, `ItemDetailView`, etc.

## State Management
- Choose the appropriate property wrapper for each state use case:
  - `@State` for local view state that doesn't need to be shared.
  - `@Binding` for state passed from a parent view that needs to be modified.
  - `@ObservedObject` for reference type objects that notify views of changes.
  - `@StateObject` for reference type objects owned by the view.
  - `@EnvironmentObject` for data shared across many views.
  - `@Environment` for system or environment values.
  - `@AppStorage` for persisting simple user preferences.
  - `@SceneStorage` for persisting UI state through scene changes.
  - `@FetchRequest` for CoreData queries.
- Minimize state and make it as local as possible.
- Consider using the MVVM (Model-View-ViewModel) pattern for complex views.
- Use a one-way data flow for predictable state management.

## Layout & Responsiveness
- Use `VStack`, `HStack`, and `ZStack` for basic layouts, not for positioning.
- Use `LazyVStack` and `LazyHStack` for large collections to improve performance.
- Use `.frame()`, `.padding()`, and geometry readers for fine-tuned layout.
- Use layout priorities to resolve ambiguous layouts.
- Create adaptive layouts that work across different device sizes and orientations.
- Use the safe area and edge insets appropriately.
- Use `GeometryReader` sparingly as it can cause layout challenges and performance impacts.
- Apply `ViewThatFits` for adaptive content sizing (iOS 16+).
- Utilize new Layout protocol for custom layout algorithms (iOS 16+).
- Implement `AnyLayout` for switching layouts at runtime.
- Take advantage of grid layouts with `Grid` and `GridRow` (iOS 16+).
- Use `@ScaledMetric` for text and dimension scaling.
- Consider `ScrollView.scrollTargetBehavior()` for advanced scrolling (iOS 17+).
- Use `contentMargins` for consistent edge spacing.
- Implement `safeAreaPadding` for safe area respecting padding (iOS 17+).
- Use dynamic type and scale content appropriately with `scaledToFit()` and `scaledToFill()`.

## Navigation & App Structure
- Use the app protocol and scene-based architecture.
- Use appropriate navigation patterns for your UI (tab-based, hierarchical, or modal).
- Consider deep linking requirements from the start.
- Create a consistent navigation style throughout your app.
- Use appropriate transition animations for different navigation contexts.
- Implement a proper back button behavior where relevant.
- Consider custom navigation solutions for complex apps.

## Modern Navigation Patterns (iOS 16+)
- Use `NavigationStack` instead of `NavigationView` where possible.
- Leverage `navigationDestination(for:)` for type-safe navigation.
- Use `NavigationPath` for programmatic navigation management.
- Store paths in `@SceneStorage` for state preservation across app launches.
- Use `.navigationTitle()` and `.navigationBarTitleDisplayMode()` for consistent navigation bars.
- Implement custom back button behavior with `.navigationBarBackButtonHidden()`.
- Use `navigationDestination(isPresented:)` for conditional navigation.
- Implement deep linking with `onOpenURL(perform:)` and appropriate path handling.
- Combine `NavigationSplitView` for multi-column interfaces (iPad/Mac).
- Consider `.navigationBarItems()` for custom navigation actions.
- Use `@NavigationState` or `@NavigationStateObject` with custom state management for complex apps.
- Implement `Hashable` on destination types for proper identification.
- Use `.toolbarRole(.navigationStack)` to customize navigation appearance (iOS 17+).
- Consider `isDetailLink` modifier to control navigation flow in split view environments.

## Performance Optimization
- Minimize unnecessary view redraws with appropriate identity management.
- Use `@State` and `@Binding` for small local state, not large data structures.
- Leverage `Identifiable` protocol for collections to optimize diffing.
- Use lazy loading for views that are expensive to create or may not be needed.
- Consider using `drawingGroup()` for complex views with many overlapping elements.
- Profile your SwiftUI app using Instruments to identify performance bottlenecks.
- Use `EquatableView` to prevent updates when data hasn't changed.
- Consider background thread work for expensive operations before updating the UI.
- Implement `@Observable` macro (iOS 17+) for more granular view updates.
- Prefer `Equatable` conformance for view models to minimize redrawing.
- Use `@MainActor` appropriately to avoid threading issues with UI updates.
- Apply `Task` and `async/await` for non-blocking operations.
- Consider `withAnimation(.none)` for updates that don't need animation.
- Break large views into smaller, focused components for better redraw performance.
- Use `.transaction()` to modify how animations propagate through the view hierarchy.
- Implement `TimelineView` for time-based view updates instead of timers.
- Leverage `matchedGeometryEffect` for efficient transitions between views.
- Use native SwiftUI views instead of UIKit/AppKit bridged views when possible.
- Profile carefully with SwiftUI Instruments tools to identify unnecessary refreshes.
- Implement `@dynamicMemberLookup` for optimizing property access in complex view models.
- Use `viewBuilder` appropriately to avoid unnecessary closures and allocations.

## Animations & Transitions
- Make animations predictable and purposeful, not distracting.
- Use implicit animations with the `.animation()` modifier for simple cases.
- Use explicit animations with `withAnimation {}` for more control or when state changes affect multiple views.
- Create custom transitions with `.transition()` modifier.
- Use `matchedGeometryEffect` for smooth transitions between views.
- Match animation duration and easing to the action being performed.
- Use animation priorities when multiple animations need to occur simultaneously.

## Accessibility
- Always provide meaningful labels with `.accessibilityLabel()`.
- Group related elements with `.accessibilityElement(children:)`.
- Add descriptions with `.accessibilityHint()` for elements that need explanation.
- Use `.accessibilityValue()` for representing the current state.
- Test with VoiceOver, Dynamic Type, and Reduce Motion settings.
- Support keyboard navigation.
- Ensure sufficient color contrast for all visual elements.

## Testing
- Write unit tests for view models and business logic.
- Use `ViewInspector` or similar libraries for testing SwiftUI views.
- Create preview providers for all views to support iterative development.
- Use multiple preview configurations to test different states and device sizes.
- Use the Xcode UI Testing framework for integration tests.

## Data Flow & Integration
- Use Combine framework with SwiftUI for reactive programming patterns.
- Prefer `async`/`await` over Combine where appropriate (iOS 15+).
- Implement proper error handling and loading states.
- Consider using the Repository pattern for data access.
- Keep networking and data persistence logic separate from UI components.
- Use dependency injection to make components testable.

## SwiftUI and UIKit/AppKit Integration
- Use `UIViewRepresentable` and `UIViewControllerRepresentable` to wrap UIKit components.
- Use `NSViewRepresentable` and `NSViewControllerRepresentable` for AppKit components.
- Use SwiftUI views within UIKit/AppKit with hosting controllers.
- Consider performance implications when mixing frameworks.
- Use coordinators to handle UIKit/AppKit delegate callbacks.

## Theming & Design Systems
- Create a consistent design system with reusable components.
- Define a centralized theme with colors, fonts, and dimensions.
- Use asset catalogs for colors and materials.
- Support dark mode with appropriate color schemes.
- Create custom view modifiers for reusable styling.
- Use `ViewModifier` protocol for complex reusable styling.