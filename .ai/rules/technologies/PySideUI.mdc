---
description: Best practices for PySide/PyQt UI development in Python for cross-platform desktop applications.
globs: ["**/*.py", "**/*.ui", "**/requirements.txt", "**/pyproject.toml"]
alwaysApply: false
version: "2.0.0"
lastUpdated: "2025-05-14"
compatibleWith: ["Python3", "asyncio"]
---

# PySide/PyQt UI Best Practices

## Project Structure & Organization
- Organize your project into logical modules:
  - `models/` - Data models and business logic
  - `views/` - UI definitions (Python files and/or .ui files)
  - `controllers/` - Logic connecting views and models
  - `resources/` - Images, icons, and other assets
  - `utils/` - Utility functions and helpers
- Separate UI definition from business logic where possible.
- Consider using the Model-View-Controller (MVC) or Model-View-ViewModel (MVVM) pattern.
- Keep UI files (if using Qt Designer) in a dedicated directory.
- Place compiled resource files (.qrc â†’ .py) in a dedicated directory.

## UI Design & Development
- Favor Qt Designer for complex UIs and direct code for simple UIs or dynamic elements.
- When using Qt Designer:
  - Name widgets with clear, descriptive names (e.g., `nameLineEdit`, `submitButton`).
  - Set appropriate tab order for keyboard navigation.
  - Use layouts consistently (avoid absolute positioning).
  - Group related controls with container widgets.
- When writing UI code manually:
  - Define UI in dedicated `setup_ui()` or similar methods.
  - Use factory methods for repeated UI elements.
  - Follow consistent naming conventions for widgets.
- Apply appropriate sizing policies for different widgets.
- Use resource files (.qrc) for managing assets rather than hardcoded paths.

## Signal-Slot Connections
- Use the new-style signal-slot syntax: `widget.signal.connect(slot_function)`.
- Connect signals to slots after the UI is fully set up.
- Organize connections in a dedicated `setup_connections()` method.
- Use lambda functions sparingly and only for very simple operations.
- For complex operations, create dedicated slot methods.
- Be cautious with signals that emit frequently (like `textChanged`); consider debouncing.
- Disconnect signals when appropriate to prevent memory leaks.
- Consider using weak references for connections to prevent circular references.
- Use the `@Slot()` decorator to mark slot methods explicitly.
- Annotate signal parameters for better type safety: `@Slot(str, int)`.

## Modern Python Integration (PySide6)
- Use type hints throughout your code for better IDE support and documentation:
  ```python
  def on_button_clicked(self, checked: bool) -> None:
      self.status_label.setText(f"Button was {'checked' if checked else 'unchecked'}")
  ```
- Leverage dataclasses for structured data models.
- Use Python's typing module for complex type definitions:
  ```python
  from typing import List, Dict, Optional, Union, Callable
  
  class DataModel:
      def get_items(self) -> List[Dict[str, Union[str, int]]]:
          # Implementation...
  ```
- Apply Protocol classes for interface definitions.
- Consider TypedDict for dictionary structure enforcement.
- Use EnumMeta for type-safe enumeration values.
- Take advantage of Python 3.10+ pattern matching for event handling.
- Apply structural pattern matching (match/case) for complex UI state handling:
  ```python
  match event_type:
      case EventType.CLICK:
          self.handle_click(event)
      case EventType.DRAG:
          self.handle_drag(event)
      case _:
          self.handle_default(event)
  ```
- Use `sender()` with caution; prefer direct connections where possible.

## Asyncio Integration with PySide6
- Use `asyncio` and `async`/`await` for non-blocking operations in the UI:
  ```python
  import asyncio
  from PySide6.QtCore import QObject, Signal, Slot
  
  class AsyncWorker(QObject):
      finished = Signal(object)
      error = Signal(str)
      
      def __init__(self):
          super().__init__()
          self.loop = asyncio.get_event_loop()
          
      @Slot()
      def run_task(self, coro):
          task = self.loop.create_task(coro)
          task.add_done_callback(self._task_done)
          
      def _task_done(self, task):
          try:
              result = task.result()
              self.finished.emit(result)
          except Exception as e:
              self.error.emit(str(e))
  ```
- Use `QEventLoop` integration with asyncio for smooth UI updates:
  ```python
  from PySide6.QtCore import QEventLoop
  from qasync import QEventLoop
  import asyncio
  
  app = QApplication([])
  loop = QEventLoop(app)
  asyncio.set_event_loop(loop)
  
  async def main():
      # Async operations
      pass
      
  loop.create_task(main())
  loop.run_forever()
  ```
- Consider `qasync` library for seamless integration:
  ```python
  # pip install qasync
  import qasync
  import asyncio
  from PySide6.QtWidgets import QApplication
  
  app = QApplication([])
  loop = qasync.QEventLoop(app)
  asyncio.set_event_loop(loop)
  ```
- Use `asyncSlot` decorator for async signal handlers:
  ```python
  from qasync import asyncSlot
  
  class MyWidget(QWidget):
      @asyncSlot()
      async def on_button_clicked(self):
          result = await some_async_operation()
          self.result_label.setText(str(result))
  ```
- Handle timeouts and cancellation properly:
  ```python
  async def fetch_with_timeout(url, timeout=10):
      try:
          async with asyncio.timeout(timeout):
              return await fetch_data(url)
      except asyncio.TimeoutError:
          return None  # or handle timeout appropriately
  ```
- Use thread pools for CPU-bound tasks that would block the event loop:
  ```python
  async def process_image(image_data):
      loop = asyncio.get_event_loop()
      return await loop.run_in_executor(None, cpu_intensive_processing, image_data)
  ```

## State Management & Data Binding
- Use properties to expose model data to the UI.
- Consider implementing custom models that inherit from Qt's model classes (e.g., `QAbstractItemModel`, `QAbstractTableModel`).
- For simple forms, use direct widget access.
- For complex forms, consider a form model approach.
- Validate user input before applying it to models.
- Use `QDataWidgetMapper` for bidirectional binding between widgets and models.
- Consider creating custom item delegates for complex display/editing behaviors.

## Widgets & Layout
- Use appropriate layouts: `QVBoxLayout`, `QHBoxLayout`, `QGridLayout`, `QFormLayout`.
- Avoid fixed sizes unless absolutely necessary; prefer minimum sizes and size policies.
- Set reasonable default sizes for main windows using `resize()`.
- Use splitters (`QSplitter`) for resizable layout sections.
- Use spacers and stretching to create visually balanced UIs.
- Group related controls with `QGroupBox` or frames.
- Use container widgets to organize complex UIs into manageable sections.
- Be mindful of platform differences in widget appearance and behavior.

## Multithreading & Asynchronous Operations
- Never update UI elements from non-GUI threads.
- Use `QThread` for background processing.
- Consider worker pattern: create worker objects and move them to threads.
- Use signals and slots for thread communication.
- Use `QThreadPool` and `QRunnable` for task-based concurrency.
- For simple cases, consider `QTimer` for delayed operations.
- Use `QEventLoop` with caution for creating synchronous interfaces to asynchronous operations.
- Consider using `asyncio` integration with Qt event loop for modern asynchronous code.

## Event Handling
- Override appropriate event handlers for custom widget behavior.
- Use event filters with caution and clean implementation.
- Remember to call the parent class implementation when overriding events.
- Use custom events for specific application needs.
- Handle keyboard shortcuts consistently across the application.
- Implement appropriate mouse event handling for custom controls.
- Use `installEventFilter()` for complex event interception needs.

## Error Handling & Debugging
- Use `QMessageBox` or custom dialogs for displaying errors to users.
- Log errors and debug information using Python's logging module.
- Use descriptive error messages that guide users to solutions.
- Consider using a global exception handler with `sys.excepthook`.
- For debug builds, enable additional logging and error checking.
- Use Qt's debugging tools like QDebug when appropriate.
- Consider adding debug panel/console in development builds.

## Performance Optimization
- Cache complex calculations and layouts.
- Delay expensive operations until needed.
- Use `setUpdatesEnabled(False)` when making multiple UI changes at once.
- Be cautious with complex custom painting operations.
- Optimize model-view performance for large datasets.
- Use `QFuture` and `QPromise` for asynchronous computations (Qt 6+).
- Profile application performance using appropriate tools.

## Testing
- Write unit tests for non-UI logic.
- Consider using `pytest-qt` for testing Qt-specific functionality.
- Create test fixtures for common UI setups.
- Use signal spies for testing signal emissions.
- Mock external dependencies for isolated testing.
- Consider UI automation testing for critical workflows.
- Test on all target platforms regularly.

## Internationalization & Localization
- Use `tr()` for all user-visible strings.
- Consider context with `QCoreApplication.translate()` for ambiguous strings.
- Use Qt's translation system with .ts and .qm files.
- Consider right-to-left layout requirements.
- Format dates, times, and numbers according to locale.
- Test UI with longer text strings (some languages expand text length).
- Consider using Qt Linguist for translation management.

## Styling & Theming
- Use Qt Style Sheets (QSS) for consistent styling.
- Define application-wide styles in a central location.
- Consider using style factories for dynamic theme switching.
- Be mindful of platform-specific style guidelines.
- Use icon themes for consistent iconography.
- Test styles across all target platforms.
- Consider color vision deficiencies in your color choices.

## Application Lifecycle
- Implement proper startup initialization.
- Handle application settings using `QSettings`.
- Implement proper shutdown cleanup.
- Save user state and restore it on next launch.
- Handle unexpected termination gracefully.
- Consider implementing session management.
- Implement proper command-line argument parsing.

## Python Packaging for PySide Applications
- Use `pyproject.toml` for modern Python packaging:
  ```toml
  [build-system]
  requires = ["setuptools>=42", "wheel"]
  build-backend = "setuptools.build_meta"
  
  [project]
  name = "your-app-name"
  version = "0.1.0"
  description = "Your PySide6 application"
  requires-python = ">=3.8"
  dependencies = [
      "PySide6>=6.5.0",
      "qasync>=0.24.0"
  ]
  
  [project.optional-dependencies]
  dev = [
      "pytest>=7.0.0",
      "black"
  ]
  ```
- Use `setuptools` with entry points for creating executables:
  ```python
  # setup.py
  from setuptools import setup, find_packages
  
  setup(
      name="your-app-name",
      version="0.1.0",
      packages=find_packages(),
      include_package_data=True,
      install_requires=[
          "PySide6>=6.5.0",
          "qasync>=0.24.0"
      ],
      entry_points={
          'console_scripts': [
              'your-app=your_app.main:main',
          ],
      },
  )
  ```
- Use resource files for bundling assets:
  ```python
  # In your app
  from importlib.resources import files, as_file
  
  with as_file(files('your_package').joinpath('resources/icon.png')) as icon_path:
      app.setWindowIcon(QIcon(str(icon_path)))
  ```
- Package UI files efficiently using Qt's resource system (`.qrc` files):
  ```bash
  pyside6-rcc resources.qrc -o resources_rc.py
  ```
- Use `fbs` (fman build system) for cross-platform packaging:
  ```bash
  pip install fbs
  fbs startproject  # Initialize your project
  fbs run  # Run your application
  fbs freeze  # Create a standalone executable
  fbs installer  # Create an installer
  ```
- Consider `PyInstaller` for creating standalone executables:
  ```bash
  pip install pyinstaller
  pyinstaller --name="YourApp" --windowed --icon=icon.ico main.py
  ```
- Implement proper versioning with `importlib.metadata`:
  ```python
  from importlib.metadata import version
  try:
      __version__ = version("your-package-name")
  except:
      __version__ = "0.0.0"  # development version
  ```
- Handle application data directories properly:
  ```python
  from PySide6.QtCore import QStandardPaths
  
  app_data_path = QStandardPaths.writableLocation(QStandardPaths.AppDataLocation)
  ```