---
description: Best practices for integrating AI into development workflows, with task-specific patterns and code generation templates.
globs: ["**/*.py", "**/*.js", "**/*.ts", "**/*.java", "**/*.swift", "**/*.go"]
alwaysApply: false
version: "1.0.0"
lastUpdated: "2025-05-14"
compatibleWith: ["Agentic-AI-Development", "Sequential-Thinking-Advanced", "Memory-MCP"]
---

# AI Workflow Integration Best Practices

## Task-Specific AI Interaction Patterns
- Design interaction patterns appropriate to specific development tasks:
  1. **Code Generation**: Full component creation from requirements
  2. **Code Completion**: In-line continuation of partially written code
  3. **Code Transformation**: Refactoring, optimization, or style changes
  4. **Code Explanation**: Understanding existing code functionality
  5. **Error Diagnosis**: Identifying and resolving bugs or issues
  6. **Documentation**: Creating or improving code documentation
  7. **Testing**: Generating test cases and test implementation
  8. **Review**: Analyzing code for improvements or issues
- Tailor your prompting strategy to match the specific task type:
  ```
  # For Code Generation
  "Create a React component that displays a paginated list of users with the following requirements:..."
  
  # For Code Transformation
  "Refactor this function to use async/await instead of promises:..."
  
  # For Error Diagnosis
  "This code is producing the following error: [error message]. Help me identify and fix the issue:..."
  ```
- Provide appropriate context for each interaction:
  - Code Generation: Requirements, constraints, style guide
  - Code Completion: Surrounding code, imports, dependencies
  - Code Transformation: Current code, target outcome, constraints
  - Error Diagnosis: Error messages, stack traces, environment details
- Apply task-specific evaluation criteria for AI responses:
  - Code Generation: Functionality, style conformance, performance
  - Code Transformation: Behavioral equivalence, readability improvements
  - Documentation: Completeness, clarity, accuracy
  - Testing: Coverage, edge cases, maintainability

## AI-Assisted Development Workflows
### Feature Development Workflow
- Apply this structured workflow for developing new features with AI assistance:
  1. **Requirement Analysis**:
     - Prompt: "Analyze these requirements and help me break them down into clear, implementable tasks:..."
     - Expected outcome: Structured list of tasks with dependencies
  2. **Architecture Planning**:
     - Prompt: "Help me design a component architecture for implementing these requirements:..."
     - Expected outcome: Component diagram or description, data flow, key interfaces
  3. **Interface Design**:
     - Prompt: "Design the API interfaces needed for these components:..."
     - Expected outcome: Interface definitions, method signatures, data structures
  4. **Implementation**:
     - Prompt: "Implement the [component name] according to this interface and these requirements:..."
     - Expected outcome: Complete, tested implementation of component
  5. **Testing**:
     - Prompt: "Generate comprehensive tests for this component covering the following scenarios:..."
     - Expected outcome: Unit tests, integration tests, edge case coverage
  6. **Documentation**:
     - Prompt: "Create documentation for this component explaining its purpose, usage, and API:..."
     - Expected outcome: Readme, API docs, usage examples
  7. **Review**:
     - Prompt: "Review this implementation against our requirements and best practices:..."
     - Expected outcome: Review comments, suggested improvements

### Debugging Workflow
- Apply this structured workflow for diagnosing and fixing issues with AI assistance:
  1. **Problem Definition**:
     - Prompt: "I'm experiencing this issue: [description]. Help me formulate a clear problem statement."
     - Expected outcome: Clear, testable problem statement
  2. **Reproduction Strategy**:
     - Prompt: "Help me create a minimal reproduction of this issue:..."
     - Expected outcome: Simplified code that demonstrates the problem
  3. **Hypothesis Generation**:
     - Prompt: "Based on this error and code, what are possible causes of the issue?"
     - Expected outcome: Prioritized list of potential causes
  4. **Investigation**:
     - Prompt: "Help me design tests to verify whether [hypothesis] is the cause."
     - Expected outcome: Diagnostic code or approaches
  5. **Solution Development**:
     - Prompt: "Now that we've identified the cause as [cause], help me implement a fix."
     - Expected outcome: Code changes that resolve the issue
  6. **Verification**:
     - Prompt: "Help me verify this fix resolves the issue without introducing regressions."
     - Expected outcome: Verification steps or tests
  7. **Prevention**:
     - Prompt: "What could we change in our development process to prevent similar issues?"
     - Expected outcome: Process or architectural improvements

### Refactoring Workflow
- Apply this structured workflow for code refactoring with AI assistance:
  1. **Goal Definition**:
     - Prompt: "I want to refactor this code to improve [aspect]. Help me define clear goals for this refactoring."
     - Expected outcome: Specific, measurable refactoring objectives
  2. **Code Analysis**:
     - Prompt: "Analyze this code for structural issues, complexity, and refactoring opportunities:..."
     - Expected outcome: Analysis of code quality issues and improvement opportunities
  3. **Refactoring Plan**:
     - Prompt: "Help me plan an incremental refactoring approach for these issues:..."
     - Expected outcome: Step-by-step refactoring plan with testable increments
  4. **Implementation**:
     - Prompt: "Refactor this code according to step [N] of our plan:..."
     - Expected outcome: Refactored code for the current step
  5. **Verification**:
     - Prompt: "Help me verify the refactored code preserves the original behavior."
     - Expected outcome: Test approaches or assertions to verify behavior
  6. **Documentation**:
     - Prompt: "Help me document the changes made and the new code structure."
     - Expected outcome: Updated documentation reflecting changes

## Code Generation Templates
### React Component Template
- Use this template for generating React components:
  ```
  Generate a React component with the following specifications:
  - Component name: [name]
  - Purpose: [description of what the component does]
  - Props: [list of props with types and descriptions]
  - State: [list of state variables if needed]
  - UI Requirements: [description of UI elements and behavior]
  - Special Requirements: [accessibility, performance, animations, etc.]
  - Framework details: [React version, TypeScript/JavaScript, styling approach]
  
  Please include:
  1. Import statements
  2. Component definition
  3. Types/interfaces
  4. Hooks setup
  5. Render function with JSX
  6. Export statement
  7. Brief documentation comments
  ```

### API Endpoint Template
- Use this template for generating API endpoints:
  ```
  Generate an API endpoint implementation with the following specifications:
  - Endpoint path: [path]
  - HTTP Method: [GET/POST/PUT/DELETE/etc.]
  - Purpose: [description of what the endpoint does]
  - Request parameters: [query params, path params, body structure]
  - Response format: [expected response structure with status codes]
  - Authentication requirements: [auth approach if needed]
  - Error handling: [expected error scenarios and responses]
  - Framework details: [Express/FastAPI/Rails/etc.]
  
  Please include:
  1. Route definition
  2. Parameter validation
  3. Authentication/authorization checks
  4. Business logic implementation
  5. Error handling
  6. Response formatting
  7. Comments explaining key aspects
  ```

### Database Model Template
- Use this template for generating database models:
  ```
  Generate a database model implementation with the following specifications:
  - Model name: [name]
  - Purpose: [description of what this model represents]
  - Fields: [list of fields with types, constraints, and descriptions]
  - Relationships: [connections to other models]
  - Indexes: [any required database indexes]
  - Framework details: [ORM framework, language]
  
  Please include:
  1. Model definition
  2. Field definitions with types and constraints
  3. Relationship definitions
  4. Index definitions
  5. Any model methods needed
  6. Validation logic if applicable
  7. Documentation comments
  ```

### Test Suite Template
- Use this template for generating test suites:
  ```
  Generate a test suite for the following code with these specifications:
  - Component under test: [description or code of what's being tested]
  - Test framework: [Jest/Pytest/RSpec/etc.]
  - Test scenarios: [list of behaviors or cases to test]
  - Mocking requirements: [dependencies that should be mocked]
  - Coverage goals: [specific coverage targets if applicable]
  
  Please include:
  1. Test setup
  2. Mock definitions
  3. Individual test cases for happy paths
  4. Test cases for edge cases and error conditions
  5. Any helper functions needed
  6. Brief comments explaining test strategy
  ```

## AI-Augmented Code Review
### Comprehensive Review Pattern
- Use this pattern for thorough code reviews:
  ```
  Please review this code with attention to the following aspects:
  
  1. Functionality: Does it correctly implement the requirements?
   - [specific functionality concerns]
  
  2. Code Quality:
   - Readability and clarity
   - Appropriate abstractions
   - DRY (Don't Repeat Yourself) principle
   - Naming conventions
  
  3. Performance:
   - Algorithmic efficiency
   - Resource usage
   - Potential bottlenecks
  
  4. Security:
   - Input validation
   - Authentication/authorization
   - Data exposure risks
   - Common vulnerabilities
  
  5. Error Handling:
   - Edge cases covered
   - Appropriate error messages
   - Graceful failure modes
  
  6. Testing:
   - Test coverage
   - Test quality and thoroughness
   - Edge case testing
  
  For each issue found, please:
  1. Identify the specific location
  2. Explain why it's an issue
  3. Suggest a specific improvement
  4. Provide example code when applicable
  
  [CODE TO REVIEW]
  ```

### Focused Review Patterns
- Use these patterns for specific review focuses:
  ```
  # Security-focused review
  Please review this code focusing specifically on security concerns:
  - Authentication and authorization
  - Input validation and sanitization
  - SQL/NoSQL injection risks
  - XSS vulnerabilities
  - CSRF protection
  - Secure data handling and storage
  - Secret management
  - Secure communications
  
  For each issue, explain the vulnerability, its potential impact, and provide a specific fix.
  
  # Performance-focused review
  Please review this code focusing specifically on performance concerns:
  - Algorithmic complexity
  - Database query efficiency
  - Memory usage and potential leaks
  - Rendering performance (for UI code)
  - Network request optimization
  - Caching opportunities
  - Resource cleanup
  
  For each issue, explain the performance impact, how it might scale with usage, and suggest specific optimizations.
  ```

### Review Feedback Integration
- Apply this structured approach for integrating review feedback:
  1. **Feedback Categorization**:
     - Prompt: "Help me categorize this review feedback by priority and type:..."
     - Expected outcome: Organized list of feedback items with priorities
  2. **Implementation Planning**:
     - Prompt: "Help me create an implementation plan for addressing these feedback items:..."
     - Expected outcome: Sequenced plan with specific changes for each item
  3. **Changes Implementation**:
     - Prompt: "Help me implement the changes for feedback item: [item description]:..."
     - Expected outcome: Code changes that address the specific feedback
  4. **Verification**:
     - Prompt: "Help me verify these changes properly address the feedback without regression."
     - Expected outcome: Verification approach or tests

## Continuous Improvement
- Implement a feedback loop for improving AI-assisted development:
  1. **Outcome Evaluation**:
     - After completing a task with AI assistance, assess the quality of the outcome
     - Document what worked well and what could be improved
  2. **Prompt Refinement**:
     - Identify patterns in successful prompts and interactions
     - Refine templates based on outcomes
     - Document effective prompt strategies
  3. **Workflow Adjustment**:
     - Modify workflows based on efficiency and effectiveness
     - Identify steps that benefit most from AI assistance
     - Streamline interactions for common tasks
  4. **Knowledge Sharing**:
     - Share effective patterns with team members
     - Document best practices for your specific codebase
     - Create custom templates for recurring tasks
- Periodically review the effectiveness of AI integration in your development process.
- Stay updated on new AI capabilities and adjust your workflows accordingly.
- Consider creating a centralized repository of effective prompts and patterns for your team.
