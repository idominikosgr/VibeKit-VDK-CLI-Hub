---
description: Best practices for developing cross-platform applications with Flutter UI framework.
globs: ["**/*.dart", "**/pubspec.yaml", "**/pubspec.lock"]
alwaysApply: false
version: "2.0.0"
lastUpdated: "2025-05-14"
compatibleWith: ["Memory-MCP","Sequential-Thinking-Advanced"]
---

# Flutter Best Practices

## Project Structure & Organization
- Follow a feature-first or layer-first architecture:
  - Feature-first: Organize by features/modules with their own UI, logic, and models
  - Layer-first: Separate UI, business logic, and data access across the app
- Keep the widget tree clean and modular:
  - `lib/` - Main application code
  - `lib/screens/` or `lib/pages/` - Full-page UI components
  - `lib/widgets/` - Reusable UI components
  - `lib/models/` - Data models and entities
  - `lib/services/` - Business logic and API communication
  - `lib/utils/` or `lib/helpers/` - Utility functions and constants
  - `lib/providers/` or `lib/blocs/` - State management
- Use barrel files (e.g., `index.dart`) to export multiple components from a directory.
- Place assets in the `assets/` directory with appropriate subdirectories.

## State Management
- Choose an appropriate state management solution based on app complexity:
  - Provider/Riverpod for simpler apps or lightweight state
  - Bloc/Cubit for complex applications with significant business logic
  - Redux for apps requiring strict unidirectional data flow
  - GetX for rapid development (but be cautious of overuse)
- Keep state at the appropriate level; don't lift state higher than necessary.
- Use `const` constructors wherever possible to improve performance through widget caching.
- Consider using `InheritedWidget` or `InheritedModel` for passing data down the widget tree.
- Separate UI and business logic using appropriate patterns (BLoC, MVVM, etc.).
- Use streams for reactive programming when appropriate.
- Consider using freezed or built_value for immutable state objects.

## Widget Design & Composition
- Favor composition over inheritance for widget reuse.
- Extract reusable widgets into their own classes.
- Keep widget classes small and focused on a single responsibility.
- Use the `const` constructor whenever possible for better performance.
- Consider using extension methods to add functionality to widgets.
- Use named parameters for better code clarity.
- Use builders and callbacks for customizable widgets.
- Implement a consistent theming strategy using ThemeData.
- Create reusable design system components rather than one-off widgets.

## Performance Optimization
- Use `const` constructors to allow Flutter to cache and reuse widgets.
- Implement proper list virtualization with `ListView.builder` for long lists.
- Use `RepaintBoundary` to isolate frequently repainting parts of the UI.
- Avoid expensive operations in the build method.
- Use lazy loading for images and data.
- Optimize image assets (size, format, resolution).
- Implement pagination for large data sets.
- Use appropriate caching strategies for network requests and computed values.
- Profile performance regularly using Flutter DevTools.
- Consider using `compute()` for CPU-intensive operations.

## Responsive Design
- Use layout builders and media queries to adapt to different screen sizes.
- Implement responsive layouts with Flexible, Expanded, and ConstrainedBox.
- Use aspect ratios to maintain proportions across different devices.
- Design adaptive interfaces that follow platform conventions when appropriate.
- Test on multiple screen sizes and orientations regularly.
- Use `LayoutBuilder` for context-specific layouts.
- Consider using packages like `flutter_screenutil` or `responsive_framework` for advanced responsive needs.
- Use fractional sizing for more flexible layouts.

## Navigation & Routing
- Use named routes for cleaner navigation code.
- Consider using a routing package for complex navigation requirements.
- Implement deep linking for external app access.
- Pass minimal data between routes; use state management for complex data sharing.
- Handle back navigation appropriately, especially for multi-step processes.
- Use route guards for authentication and authorization.
- Implement proper error handling for navigation.
- Consider using the Navigator 2.0 API for more complex navigation scenarios.

## API Integration & Data Management
- Use repository pattern to abstract data sources.
- Implement proper error handling for network requests.
- Consider using code generation for API clients (retrofit, chopper, etc.).
- Use appropriate serialization/deserialization approaches (json_serializable, built_value, freezed).
- Implement proper caching strategies for API responses.
- Handle offline capabilities where appropriate.
- Use pagination for large data sets.
- Consider using GraphQL for complex data requirements.
- Implement retry mechanisms for unreliable network connections.

## Testing
- Write unit tests for business logic and services.
- Use widget tests for testing UI components.
- Implement integration tests for critical user flows.
- Use golden tests for visual regression testing.
- Mock dependencies for isolated testing.
- Use test fixtures for consistent test data.
- Target high test coverage for business logic.
- Test edge cases and error scenarios.
- Create testable code by following dependency injection principles.

## Accessibility
- Support screen readers by providing semantic labels.
- Ensure sufficient color contrast for text and UI elements.
- Support text scaling for users with vision impairments.
- Make all interactive elements keyboard accessible.
- Test with accessibility tools like TalkBack and VoiceOver.
- Use ExcludeSemantics or MergeSemantics appropriately.
- Provide alternative text for images and icons.
- Ensure touch targets are sufficiently large.

## Internationalization
- Use the Flutter `intl` package for localization.
- Extract all user-facing strings into localization files.
- Support right-to-left layouts for appropriate languages.
- Format dates, times, and numbers according to locale.
- Consider cultural differences in design elements.
- Test UI layouts with longer text strings (some languages expand text length).
- Support dynamic locale switching.
- Use proper pluralization rules.

## Animations & Transitions
- Use implicit animations for simpler state transitions.
- Use explicit animations when more control is needed.
- Keep animations subtle and purposeful.
- Ensure animations perform well on lower-end devices.
- Use staggered animations for complex sequences.
- Consider using pre-built animation packages for common effects.
- Implement proper lifecycle management for animations.
- Use Hero animations for transitioning elements between screens.

## Security
- Store sensitive data securely using packages like flutter_secure_storage.
- Implement proper authentication and authorization.
- Use HTTPS for all network communications.
- Validate all user input.
- Implement certificate pinning for sensitive applications.
- Obfuscate code for release builds.
- Handle biometric authentication securely when used.
- Be cautious with third-party packages and review their security practices.

## App Lifecycle
- Handle app state changes appropriately (paused, resumed, detached).
- Implement proper cleanup when the app is backgrounded.
- Save user state for seamless resumption.
- Handle device orientation changes gracefully.
- Implement proper error handling for lifecycle events.
- Consider using AppLifecycleObserver for more control.
- Release resources when they are no longer needed.
- Handle system theme changes appropriately.

## Flutter Plugins & Dependencies
- Keep dependencies up to date with regular audits.
- Be selective about adding dependencies; evaluate trade-offs.
- Consider license implications of third-party packages.
- Pin dependency versions for stable builds.
- Prefer widely-used, actively maintained packages.
- Consider creating platform channels for custom native functionality.
- Test thoroughly when updating dependencies.
- Contribute back to the Flutter community when appropriate.