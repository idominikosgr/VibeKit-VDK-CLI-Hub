---
description: Best practices for integrating Model Context Protocol servers and implementing effective memory patterns.
globs: ["**/*.mcp.json", "**/*.js", "**/*.ts", "**/*.py"]
alwaysApply: false
version: "1.0.0"
lastUpdated: "2025-05-14"
compatibleWith: ["Memory-MCP", "Sequential-Thinking", "TypeScript-Modern", "Python3"]
---

# MCP Server Integration Best Practices

## Understanding MCP Architecture
- The Model Context Protocol (MCP) enables AI models to interact with external tools, data sources, and services.
- MCP servers provide specialized capabilities to AI assistants through standardized interfaces.
- Key MCP components include:
  - **Protocol Specification**: Defines how clients and servers communicate
  - **Server Implementation**: Provides specific functionality (filesystem, memory, etc.)
  - **Client Integration**: Connects AI assistants to server capabilities
  - **Tool Definitions**: Standardized descriptions of available functions
- MCP enables AI assistants to overcome context limitations and interact with external systems safely.
- Common MCP server types include:
  - **Filesystem**: File and directory operations
  - **Memory**: Persistent knowledge storage and retrieval
  - **Sequential-Thinking**: Structured reasoning frameworks
  - **Database**: Direct database access and manipulation
  - **Web**: Internet access and information retrieval
  - **Custom**: Domain-specific capabilities for particular applications

## MCP Server Configuration
- Configure MCP servers using a standardized JSON format:
  ```json
  {
    "servers": [
      {
        "name": "filesystem",
        "url": "http://localhost:8090",
        "auth": {
          "type": "basic",
          "username": "user",
          "password": "pass"
        },
        "allowedDirectories": [
          "/path/to/project"
        ]
      },
      {
        "name": "memory",
        "url": "http://localhost:8091",
        "auth": {
          "type": "bearer",
          "token": "api-key-here"
        }
      }
    ]
  }
  ```
- Store MCP configuration in `~/.cursor/mcp.json` for Cursor editor integration.
- Set up proper authentication for each server according to its requirements.
- Configure appropriate permissions and constraints for each server.
- Keep server configurations updated as you add new capabilities.
- Document server capabilities and configurations for team consistency.
- Consider environment-specific configurations for development, testing, and production.
- Implement secure credential management for server authentication.

## Effective Memory Patterns
- Design a structured memory hierarchy based on knowledge persistence needs:
  1. **Transient Knowledge**: Information relevant only to the current task
  2. **Session Knowledge**: Information relevant throughout a user session
  3. **Persistent Knowledge**: Information relevant across multiple sessions
  4. **Global Knowledge**: Information relevant to all users and contexts
- Implement appropriate memory organization strategies:
  ```typescript
  // Example memory creation with organization
  await createMemory({
    title: "User Preferences",
    content: "User prefers TypeScript with React for frontend development",
    tags: ["preferences", "tech_stack", "frontend"],
    corpusNames: ["user/project-name"],
    userTriggered: false
  });
  ```
- Use consistent tagging for effective retrieval:
  - Use snake_case for tag consistency
  - Create tag taxonomies for related concepts
  - Apply both specific and general tags for retrieval flexibility
  - Consider versioning tags for evolving knowledge
- Implement memory update patterns for evolving knowledge:
  ```typescript
  // Check if memory exists and update if needed
  const existingMemories = await searchMemory("user preferences");
  if (existingMemories.length > 0) {
    await updateMemory({
      id: existingMemories[0].id,
      title: existingMemories[0].title,
      content: "Updated user preferences: Now prefers Vue.js for simpler projects"
    });
  } else {
    // Create new memory if not found
  }
  ```
- Design memory content for maximum utility:
  - Include context about when and why the information was captured
  - Structure content with clear headings and bullet points
  - Focus on factual information over subjective impressions
  - Include examples where helpful for clarification
  - Reference related memories when appropriate
- Implement appropriate memory lifecycle management:
  - Create memories proactively when valuable information is encountered
  - Update memories when information evolves or expands
  - Merge related memories when consolidation improves utility
  - Delete obsolete or incorrect memories
  - Periodically review and refine memory organization

## Knowledge Graph Integration
- Leverage knowledge graph capabilities for complex relationship modeling:
  ```typescript
  // Creating entities in the knowledge graph
  await createEntities([
    {
      name: "UserInterface",
      entityType: "Component",
      observations: ["Main dashboard interface", "Uses React with TypeScript"]
    },
    {
      name: "DataService",
      entityType: "Service",
      observations: ["Handles data fetching and caching", "Implements repository pattern"]
    }
  ]);
  
  // Creating relationships between entities
  await createRelations([
    {
      from: "UserInterface",
      to: "DataService",
      relationType: "consumes"
    }
  ]);
  ```
- Design entity types appropriate to your domain:
  - Software: Components, Services, Models, Utils, Configs
  - Business: Products, Customers, Processes, Metrics
  - Research: Concepts, Methods, Findings, Sources
- Implement relationship types that capture meaningful connections:
  - Use active voice verbs ("consumes", "depends on", "implements")
  - Create bidirectional relationships when appropriate
  - Consider relationship strength or confidence when relevant
- Use observations to capture contextual details about entities:
  - Include factual attributes and characteristics
  - Note important state or configuration details
  - Reference external resources or documentation
  - Update observations as entities evolve
- Implement graph query patterns for complex information retrieval:
  ```typescript
  // Finding all components that depend on a specific service
  const dependentComponents = await searchNodes("depends on DataService");
  
  // Exploring the full graph structure
  const fullGraph = await readGraph();
  ```

## Sequential Thinking with Complex Problems
- Implement structured problem decomposition using the sequential thinking framework:
  ```typescript
  await sequentialThinking({
    thought: "First, I need to understand the core requirements of this API design.",
    thoughtNumber: 1,
    totalThoughts: 5,
    nextThoughtNeeded: true
  });
  
  await sequentialThinking({
    thought: "The key requirements appear to be: 1) User authentication, 2) Resource management, 3) Notification system.",
    thoughtNumber: 2,
    totalThoughts: 5,
    nextThoughtNeeded: true
  });
  ```
- Design effective thought chains with these patterns:
  1. **Problem Analysis**: Understand what's being asked and identify constraints
  2. **Knowledge Retrieval**: Pull relevant information from memory or external sources
  3. **Task Decomposition**: Break complex problems into manageable subproblems
  4. **Solution Planning**: Map out the approach before implementation
  5. **Implementation Strategy**: Work through solution components systematically
  6. **Verification**: Validate solutions against requirements and constraints
  7. **Reflection**: Consider what worked, what didn't, and what to improve
- Implement branching thought patterns for exploring alternatives:
  ```typescript
  await sequentialThinking({
    thought: "Alternative approach: We could use GraphQL instead of REST for this API.",
    thoughtNumber: 4,
    totalThoughts: 6,
    branchFromThought: 3,
    branchId: "graphql-alternative",
    nextThoughtNeeded: true
  });
  ```
- Use revision patterns to refine thinking based on new insights:
  ```typescript
  await sequentialThinking({
    thought: "On further reflection, the authentication system needs to handle both API keys and OAuth2.",
    thoughtNumber: 5,
    totalThoughts: 6,
    isRevision: true,
    revisesThought: 2,
    nextThoughtNeeded: true
  });
  ```
- Apply appropriate thought structures for different problem types:
  - **Analysis Problems**: Focus on breaking down systems into components
  - **Design Problems**: Balance constraints, requirements, and tradeoffs
  - **Optimization Problems**: Identify bottlenecks and improvement opportunities
  - **Decision Problems**: Evaluate alternatives against explicit criteria
  - **Diagnostic Problems**: Form and test hypotheses systematically
- Document thought processes for transparency and future reference.
- Implement meta-cognition by periodically evaluating the effectiveness of the thinking approach.

## Filesystem Integration Patterns
- Implement safe file operation patterns using MCP filesystem tools:
  ```typescript
  // Reading file contents safely
  const fileContent = await readFile({ path: '/project/src/App.tsx' });
  
  // Creating a new file with appropriate error handling
  try {
    await writeFile({ 
      path: '/project/src/components/Button.tsx',
      content: '// Button component implementation...' 
    });
  } catch (error) {
    // Handle error appropriately
  }
  ```
- Design effective file search patterns:
  ```typescript
  // Finding relevant code files
  const searchResults = await searchFiles({
    path: '/project/src',
    pattern: '*.tsx',
    excludePatterns: ['node_modules', 'dist']
  });
  ```
- Implement appropriate directory management patterns:
  ```typescript
  // Creating directory structure
  await createDirectory({ path: '/project/src/features/auth' });
  
  // Getting directory structure
  const dirStructure = await directoryTree({ path: '/project/src' });
  ```
- Use appropriate error handling for filesystem operations:
  - Check for file existence before operations
  - Handle permissions issues gracefully
  - Implement fallbacks for missing files or directories
  - Provide clear error information to users
- Design filesystem operations for idempotence when possible.
- Implement appropriate cleanup of temporary files.
- Use consistent path handling patterns across different operations.

## Integration with Other MCP Servers
- Design modular patterns for working with multiple MCP servers:
  ```typescript
  // Using filesystem and memory servers together
  const fileContent = await readFile({ path: '/project/README.md' });
  
  await createMemory({
    title: "Project README Summary",
    content: `The project README describes: ${summarizeContent(fileContent)}`,
    tags: ["project_docs", "readme"]
  });
  ```
- Implement appropriate error handling for server interactions:
  ```typescript
  try {
    const dbResults = await dbQuery('SELECT * FROM users LIMIT 10');
    // Process results
  } catch (error) {
    if (error.type === 'connection_error') {
      // Handle connection issues
    } else if (error.type === 'query_error') {
      // Handle query syntax or execution issues
    } else {
      // Handle other errors
    }
  }
  ```
- Design fallback strategies for server unavailability:
  - Cache important information for offline use
  - Implement graceful degradation of functionality
  - Provide clear feedback about limited capabilities
  - Retry operations with appropriate backoff
- Coordinate operations across servers for complex workflows.
- Implement appropriate transaction patterns for multi-server operations.
- Document integration patterns for developer consistency.

## Testing and Debugging
- Implement effective testing strategies for MCP server integrations:
  - Unit tests for individual server interactions
  - Integration tests for multi-server workflows
  - Mock servers for testing error conditions
  - End-to-end tests for critical user journeys
- Design debugging tools and approaches:
  - Structured logging of server interactions
  - Tracing for complex workflows
  - State inspection at critical points
  - Replay capabilities for reproducing issues
- Implement appropriate error reporting:
  - Clear error messages for end users
  - Detailed logs for developers
  - Context preservation for debugging
  - Error categorization for analytics
- Design observability into MCP server interactions:
  - Performance metrics for server operations
  - Usage patterns and frequency
  - Error rates and types
  - Resource utilization
- Document common issues and their resolutions.
- Implement automated testing in CI/CD pipelines.
- Create development environments with consistent server configurations.

## Security Considerations
- Implement proper authentication and authorization:
  - Use appropriate authentication mechanisms for each server
  - Implement principle of least privilege for operations
  - Audit access and operation patterns
  - Rotate credentials according to security policies
- Design secure data handling practices:
  - Encrypt sensitive data at rest and in transit
  - Sanitize user inputs before server operations
  - Implement proper data validation
  - Apply appropriate content security policies
- Consider privacy implications of MCP server operations:
  - Minimize data collection to what's necessary
  - Implement appropriate data retention policies
  - Provide transparency about data usage
  - Respect user consent for data operations
- Implement secure deployment practices:
  - Validate server configurations before deployment
  - Use secure network configurations
  - Implement proper container security
  - Apply regular security updates
- Document security considerations and requirements.
- Implement security testing as part of the development process.
- Create incident response procedures for security issues.
